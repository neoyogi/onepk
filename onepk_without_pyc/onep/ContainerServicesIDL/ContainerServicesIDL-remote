#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import ContainerServicesIDL
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  i32 cs_containernew_IDL(i32 sessionHandle, CS_mac_id_IDL macID)'
  print '  CS_profile_info_IDL get_container_profile_IDL(i32 containerId)'
  print '   cs_get_dns_list_IDL(i32 containerId)'
  print '   cs_get_net_addr_info_list_IDL(i32 containerID, CS_mac_id_IDL interfaceid)'
  print '  i32 cs_callback_registration_IDL(i32 containerID, i32 cbtype, i32 adding)'
  print '  i32 cs_reply_notification_result_IDL(i32 containerID, i32 cbtype, i32 notif_success)'
  print '  i32 cs_reply_addr_information_result_IDL(i32 containerID, i32 cbtype, i32 returncode, i32 transactionID, i32 nettype, i32 count, CS_netlist_IDL netlist)'
  print '  i32 cs_reply_string_information_result_IDL(i32 containerID, i32 cbtype, i32 returncode, i32 transactionID, string str1)'
  print '  CS_ext_host_info_IDL cs_ext_request_IDL(i32 containerID, CS_ext_guest_request_param_IDL req_info)'
  print '  i32 cs_ext_guest_reply_IDL(i32 containerID, i32 transactionID,  reply_info)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ContainerServicesIDL.Client(protocol)
transport.open()

if cmd == 'cs_containernew_IDL':
  if len(args) != 2:
    print 'cs_containernew_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.cs_containernew_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'get_container_profile_IDL':
  if len(args) != 1:
    print 'get_container_profile_IDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_container_profile_IDL(eval(args[0]),))

elif cmd == 'cs_get_dns_list_IDL':
  if len(args) != 1:
    print 'cs_get_dns_list_IDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.cs_get_dns_list_IDL(eval(args[0]),))

elif cmd == 'cs_get_net_addr_info_list_IDL':
  if len(args) != 2:
    print 'cs_get_net_addr_info_list_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.cs_get_net_addr_info_list_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'cs_callback_registration_IDL':
  if len(args) != 3:
    print 'cs_callback_registration_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.cs_callback_registration_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'cs_reply_notification_result_IDL':
  if len(args) != 3:
    print 'cs_reply_notification_result_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.cs_reply_notification_result_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'cs_reply_addr_information_result_IDL':
  if len(args) != 7:
    print 'cs_reply_addr_information_result_IDL requires 7 args'
    sys.exit(1)
  pp.pprint(client.cs_reply_addr_information_result_IDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),eval(args[6]),))

elif cmd == 'cs_reply_string_information_result_IDL':
  if len(args) != 5:
    print 'cs_reply_string_information_result_IDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.cs_reply_string_information_result_IDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'cs_ext_request_IDL':
  if len(args) != 2:
    print 'cs_ext_request_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.cs_ext_request_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'cs_ext_guest_reply_IDL':
  if len(args) != 3:
    print 'cs_ext_guest_reply_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.cs_ext_guest_reply_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
