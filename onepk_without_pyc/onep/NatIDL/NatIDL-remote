#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import NatIDL
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  i32 createStaticNatRule_IDL(i32 sessionId, StaticNatParam_IDL staticNatParam)'
  print '  i32 deleteStaticNatRule_IDL(i32 sessionId, string ruleId)'
  print '  StaticNatParam_IDL getStaticNatRule_IDL(i32 sessionId, string ruleId)'
  print '   getAllStaticNatRule_IDL(i32 sessionId, string vrfName)'
  print '  i32 createNatPool_IDL(i32 sessionId, NatPoolParam_IDL natPoolParam)'
  print '  i32 deleteNatPool_IDL(i32 sessionId, string natPoolId)'
  print '  NatPoolParam_IDL getNatPool_IDL(i32 sessionId, string natPoolId)'
  print '   getAllNatPool_IDL(i32 sessionId)'
  print '  i32 createDynamicNatRule_IDL(i32 sessionId, DynamicNatParam_IDL dynamicNatParam)'
  print '  i32 deleteDynamicNatRule_IDL(i32 sessionId, string ruleId)'
  print '  DynamicNatParam_IDL getDynamicNatRule_IDL(i32 sessionId, string ruleId)'
  print '   getAllDynamicNatRule_IDL(i32 sessionId, string vrfName)'
  print '   getAllNatTranslations_IDL(i32 sessionId)'
  print '  i32 NetworkInterface_setNATDirectionIDL(i64 xosHandle, i32 direction, i32 operType)'
  print '  i32 NetworkInterface_getNATDirectionIDL(i64 xosHandle)'
  print '  i32 clearNatTranslation_IDL(i32 sessionId)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = NatIDL.Client(protocol)
transport.open()

if cmd == 'createStaticNatRule_IDL':
  if len(args) != 2:
    print 'createStaticNatRule_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.createStaticNatRule_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'deleteStaticNatRule_IDL':
  if len(args) != 2:
    print 'deleteStaticNatRule_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteStaticNatRule_IDL(eval(args[0]),args[1],))

elif cmd == 'getStaticNatRule_IDL':
  if len(args) != 2:
    print 'getStaticNatRule_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.getStaticNatRule_IDL(eval(args[0]),args[1],))

elif cmd == 'getAllStaticNatRule_IDL':
  if len(args) != 2:
    print 'getAllStaticNatRule_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.getAllStaticNatRule_IDL(eval(args[0]),args[1],))

elif cmd == 'createNatPool_IDL':
  if len(args) != 2:
    print 'createNatPool_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.createNatPool_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'deleteNatPool_IDL':
  if len(args) != 2:
    print 'deleteNatPool_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteNatPool_IDL(eval(args[0]),args[1],))

elif cmd == 'getNatPool_IDL':
  if len(args) != 2:
    print 'getNatPool_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.getNatPool_IDL(eval(args[0]),args[1],))

elif cmd == 'getAllNatPool_IDL':
  if len(args) != 1:
    print 'getAllNatPool_IDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAllNatPool_IDL(eval(args[0]),))

elif cmd == 'createDynamicNatRule_IDL':
  if len(args) != 2:
    print 'createDynamicNatRule_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.createDynamicNatRule_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'deleteDynamicNatRule_IDL':
  if len(args) != 2:
    print 'deleteDynamicNatRule_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteDynamicNatRule_IDL(eval(args[0]),args[1],))

elif cmd == 'getDynamicNatRule_IDL':
  if len(args) != 2:
    print 'getDynamicNatRule_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.getDynamicNatRule_IDL(eval(args[0]),args[1],))

elif cmd == 'getAllDynamicNatRule_IDL':
  if len(args) != 2:
    print 'getAllDynamicNatRule_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.getAllDynamicNatRule_IDL(eval(args[0]),args[1],))

elif cmd == 'getAllNatTranslations_IDL':
  if len(args) != 1:
    print 'getAllNatTranslations_IDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAllNatTranslations_IDL(eval(args[0]),))

elif cmd == 'NetworkInterface_setNATDirectionIDL':
  if len(args) != 3:
    print 'NetworkInterface_setNATDirectionIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_setNATDirectionIDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'NetworkInterface_getNATDirectionIDL':
  if len(args) != 1:
    print 'NetworkInterface_getNATDirectionIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_getNATDirectionIDL(eval(args[0]),))

elif cmd == 'clearNatTranslation_IDL':
  if len(args) != 1:
    print 'clearNatTranslation_IDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.clearNatTranslation_IDL(eval(args[0]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
