#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import VlanIDL
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  i32 createVlan_IDL(i32 sessionId, VlanParam_IDL vlanParam)'
  print '  i32 deleteVlan_IDL(i32 sessionId, i32 vlanId)'
  print '  i32 setVlanState_IDL(i32 sessionId, i32 vlanId, i16 vlanState)'
  print '  i32 getVlanState_IDL(i32 sessionId, i32 vlanId)'
  print '  i32 setVlanAdminState_IDL(i32 sessionId, i32 vlanId, i16 vlanAdminState)'
  print '  i32 getVlanAdminState_IDL(i32 sessionId, i32 vlanId)'
  print '  i32 setVlanName_IDL(i32 sessionId, i32 vlanId, string vlanName)'
  print '  i32 setIntfVlan_IDL(i32 sessionId, i64 ifHandle, i32 vlanId)'
  print '  i32 removeIntfFromVlan_IDL(i32 sessionId, i64 ifHandle, i32 vlanId)'
  print '   getAllVlans_IDL(i32 sessionId)'
  print '   Vlan_getInterfaces_IDL(i32 vlanId)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = VlanIDL.Client(protocol)
transport.open()

if cmd == 'createVlan_IDL':
  if len(args) != 2:
    print 'createVlan_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.createVlan_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'deleteVlan_IDL':
  if len(args) != 2:
    print 'deleteVlan_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteVlan_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'setVlanState_IDL':
  if len(args) != 3:
    print 'setVlanState_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.setVlanState_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'getVlanState_IDL':
  if len(args) != 2:
    print 'getVlanState_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.getVlanState_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'setVlanAdminState_IDL':
  if len(args) != 3:
    print 'setVlanAdminState_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.setVlanAdminState_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'getVlanAdminState_IDL':
  if len(args) != 2:
    print 'getVlanAdminState_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.getVlanAdminState_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'setVlanName_IDL':
  if len(args) != 3:
    print 'setVlanName_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.setVlanName_IDL(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'setIntfVlan_IDL':
  if len(args) != 3:
    print 'setIntfVlan_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.setIntfVlan_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'removeIntfFromVlan_IDL':
  if len(args) != 3:
    print 'removeIntfFromVlan_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.removeIntfFromVlan_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'getAllVlans_IDL':
  if len(args) != 1:
    print 'getAllVlans_IDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAllVlans_IDL(eval(args[0]),))

elif cmd == 'Vlan_getInterfaces_IDL':
  if len(args) != 1:
    print 'Vlan_getInterfaces_IDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.Vlan_getInterfaces_IDL(eval(args[0]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
