#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import DhcpIDL
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  i32 addDhcpPoolIDL(i32 sessionId, string poolName, string vrfName)'
  print '  i32 deleteDhcpPoolIDL(i32 sessionId, string poolName)'
  print '   getDhcpPoolListIDL(i32 sessionId)'
  print '  i32 setDhcpDbAgentIDL(i32 sessionId, string url, i32 writeDelay, i32 timeOut)'
  print '   getDhcpDbAgentListIDL(i32 sessionId)'
  print '  i32 deleteDhcpDbAgentIDL(i32 sessionId, string url)'
  print '  i32 setDhcpExclusionIDL(i32 sessionId, string vrfName, DhcpExclusionIDL exclude)'
  print '   getDhcpExclusionIDL(i32 sessionId, string vrfName)'
  print '  i32 deleteDhcpExclusionIDL(i32 sessionId, string vrfName, DhcpExclusionIDL exclude)'
  print '  i32 setDhcpLeaseIDL(i32 sessionId, string poolName, i32 infinite, DateTimeIDL lease)'
  print '  DateTimeIDL getDhcpLeaseIDL(i32 sessionId, string poolName)'
  print '  i32 addDeleteDhcpServerOptionIDL(i32 sessionId, string poolName,  ipList, i32 option, i32 action)'
  print '   getDhcpServerOptionIDL(i32 sessionId, string poolName, i32 option)'
  print '  i32 addDeleteDhcpNetbiosNodeIDL(i32 sessionId, string poolName, i32 type, i32 action)'
  print '  i32 getDhcpNetbiosNodeIDL(i32 sessionId, string poolName)'
  print '  i32 addDeleteDhcpPoolDomainIDL(i32 sessionId, string poolName, string domainName, i32 action)'
  print '  string getDhcpPoolDomainIDL(i32 sessionId, string poolName)'
  print '  i32 addDeleteDhcpPoolHostIDL(i32 sessionId, string poolName, NetworkPrefixIDL prefix, i32 action)'
  print '  NetworkPrefixIDL getDhcpPoolHostIDL(i32 sessionId, string poolName)'
  print '  i32 addDeleteDhcpPoolNetworkIDL(i32 sessionId, string poolName, NetworkPrefixIDL network, i32 nwType, i32 action)'
  print '   getDhcpPoolNetworkIDL(i32 sessionId, string poolName)'
  print '  i32 addDeleteDhcpPoolClientNameIDL(i32 sessionId, string poolName, string clientName, i32 action)'
  print '  string getDhcpPoolClientNameIDL(i32 sessionId, string poolName)'
  print '  i32 addDeleteDhcpPoolHwAddrIDL(i32 sessionId, string poolName, string hwAddr, i32 action)'
  print '  string getDhcpPoolHwAddrIDL(i32 sessionId, string poolName)'
  print '  i32 setUnsetDhcpConflictLoggingIDL(i32 sessionId, i32 action)'
  print '   getDHCPBindingListIDL(string vrfName, NetworkAddressIDL addr, i32 maxCount)'
  print '  DhcpBindParamIDL getDHCPBindingByIpAddrIDL(string vrfName, NetworkAddressIDL addr)'
  print '  i32 deleteDhcpAllBindingsIDL(i32 sessionId, string vrf)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = DhcpIDL.Client(protocol)
transport.open()

if cmd == 'addDhcpPoolIDL':
  if len(args) != 3:
    print 'addDhcpPoolIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.addDhcpPoolIDL(eval(args[0]),args[1],args[2],))

elif cmd == 'deleteDhcpPoolIDL':
  if len(args) != 2:
    print 'deleteDhcpPoolIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteDhcpPoolIDL(eval(args[0]),args[1],))

elif cmd == 'getDhcpPoolListIDL':
  if len(args) != 1:
    print 'getDhcpPoolListIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.getDhcpPoolListIDL(eval(args[0]),))

elif cmd == 'setDhcpDbAgentIDL':
  if len(args) != 4:
    print 'setDhcpDbAgentIDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.setDhcpDbAgentIDL(eval(args[0]),args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'getDhcpDbAgentListIDL':
  if len(args) != 1:
    print 'getDhcpDbAgentListIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.getDhcpDbAgentListIDL(eval(args[0]),))

elif cmd == 'deleteDhcpDbAgentIDL':
  if len(args) != 2:
    print 'deleteDhcpDbAgentIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteDhcpDbAgentIDL(eval(args[0]),args[1],))

elif cmd == 'setDhcpExclusionIDL':
  if len(args) != 3:
    print 'setDhcpExclusionIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.setDhcpExclusionIDL(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'getDhcpExclusionIDL':
  if len(args) != 2:
    print 'getDhcpExclusionIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.getDhcpExclusionIDL(eval(args[0]),args[1],))

elif cmd == 'deleteDhcpExclusionIDL':
  if len(args) != 3:
    print 'deleteDhcpExclusionIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.deleteDhcpExclusionIDL(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'setDhcpLeaseIDL':
  if len(args) != 4:
    print 'setDhcpLeaseIDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.setDhcpLeaseIDL(eval(args[0]),args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'getDhcpLeaseIDL':
  if len(args) != 2:
    print 'getDhcpLeaseIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.getDhcpLeaseIDL(eval(args[0]),args[1],))

elif cmd == 'addDeleteDhcpServerOptionIDL':
  if len(args) != 5:
    print 'addDeleteDhcpServerOptionIDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.addDeleteDhcpServerOptionIDL(eval(args[0]),args[1],eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'getDhcpServerOptionIDL':
  if len(args) != 3:
    print 'getDhcpServerOptionIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.getDhcpServerOptionIDL(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'addDeleteDhcpNetbiosNodeIDL':
  if len(args) != 4:
    print 'addDeleteDhcpNetbiosNodeIDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.addDeleteDhcpNetbiosNodeIDL(eval(args[0]),args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'getDhcpNetbiosNodeIDL':
  if len(args) != 2:
    print 'getDhcpNetbiosNodeIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.getDhcpNetbiosNodeIDL(eval(args[0]),args[1],))

elif cmd == 'addDeleteDhcpPoolDomainIDL':
  if len(args) != 4:
    print 'addDeleteDhcpPoolDomainIDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.addDeleteDhcpPoolDomainIDL(eval(args[0]),args[1],args[2],eval(args[3]),))

elif cmd == 'getDhcpPoolDomainIDL':
  if len(args) != 2:
    print 'getDhcpPoolDomainIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.getDhcpPoolDomainIDL(eval(args[0]),args[1],))

elif cmd == 'addDeleteDhcpPoolHostIDL':
  if len(args) != 4:
    print 'addDeleteDhcpPoolHostIDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.addDeleteDhcpPoolHostIDL(eval(args[0]),args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'getDhcpPoolHostIDL':
  if len(args) != 2:
    print 'getDhcpPoolHostIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.getDhcpPoolHostIDL(eval(args[0]),args[1],))

elif cmd == 'addDeleteDhcpPoolNetworkIDL':
  if len(args) != 5:
    print 'addDeleteDhcpPoolNetworkIDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.addDeleteDhcpPoolNetworkIDL(eval(args[0]),args[1],eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'getDhcpPoolNetworkIDL':
  if len(args) != 2:
    print 'getDhcpPoolNetworkIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.getDhcpPoolNetworkIDL(eval(args[0]),args[1],))

elif cmd == 'addDeleteDhcpPoolClientNameIDL':
  if len(args) != 4:
    print 'addDeleteDhcpPoolClientNameIDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.addDeleteDhcpPoolClientNameIDL(eval(args[0]),args[1],args[2],eval(args[3]),))

elif cmd == 'getDhcpPoolClientNameIDL':
  if len(args) != 2:
    print 'getDhcpPoolClientNameIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.getDhcpPoolClientNameIDL(eval(args[0]),args[1],))

elif cmd == 'addDeleteDhcpPoolHwAddrIDL':
  if len(args) != 4:
    print 'addDeleteDhcpPoolHwAddrIDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.addDeleteDhcpPoolHwAddrIDL(eval(args[0]),args[1],args[2],eval(args[3]),))

elif cmd == 'getDhcpPoolHwAddrIDL':
  if len(args) != 2:
    print 'getDhcpPoolHwAddrIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.getDhcpPoolHwAddrIDL(eval(args[0]),args[1],))

elif cmd == 'setUnsetDhcpConflictLoggingIDL':
  if len(args) != 2:
    print 'setUnsetDhcpConflictLoggingIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.setUnsetDhcpConflictLoggingIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'getDHCPBindingListIDL':
  if len(args) != 3:
    print 'getDHCPBindingListIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.getDHCPBindingListIDL(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'getDHCPBindingByIpAddrIDL':
  if len(args) != 2:
    print 'getDHCPBindingByIpAddrIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.getDHCPBindingByIpAddrIDL(args[0],eval(args[1]),))

elif cmd == 'deleteDhcpAllBindingsIDL':
  if len(args) != 2:
    print 'deleteDhcpAllBindingsIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteDhcpAllBindingsIDL(eval(args[0]),args[1],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
