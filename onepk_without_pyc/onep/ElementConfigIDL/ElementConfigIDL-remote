#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import ElementConfigIDL
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  i32 createSnmpHostIDL(i32 sessionHandle, SnmpServerIDL snmpServer)'
  print '   getSnmpHostsIDL(i32 sessionHandle)'
  print '  i32 deleteSnmpHostIDL(i32 sessionHandle, SnmpServerIDL snmpServer)'
  print '  i32 setSnmpTrapIDL(i32 sessionHandle, i32 trapType, i32 operType)'
  print '  i32 writeMemIDL(i32 sessionHandle)'
  print '  i32 createSyslogHostIDL(i32 sessionHandle, SyslogHostIDL logHost)'
  print '   getSyslogHostListIDL(i32 sessionId)'
  print '  i32 removeSyslogHostIDL(i32 sessionId, SyslogHostIDL logHost)'
  print '  i32 setSyslogFacilityTypeIDL(i32 sessionHandle, i16 facilityType)'
  print '  i32 setSyslogTrapLevelIDL(i32 sessionHandle, i32 trapLevel)'
  print '  i32 getSyslogFacilityTypeIDL(i32 sessionHandle)'
  print '  i32 getSyslogTrapLevelIDL(i32 sessionHandle)'
  print '  i32 setTACACSSharedKeyIDL(i32 sessionHandle, string tACACSSharedKey)'
  print '  i32 deleteTACACSSharedKeyIDL(i32 sessionHandle)'
  print '   getTACACSServersIDL(i32 sessionHandle)'
  print '  i32 addTACACSServerIDL(i32 sessionHandle, TACACSServerIDL server)'
  print '  i32 deleteTACACSServerIDL(i32 sessionHandle, TACACSServerIDL server)'
  print '   getLocalAuthUsersIDL(i32 sessionHandle)'
  print '  i32 addLocalAuthUserIDL(i32 sessionHandle, LocalAuthUserIDL user)'
  print '  i32 deleteLocalAuthUserIDL(i32 sessionHandle, LocalAuthUserIDL user)'
  print '  i32 copyIDL(i32 sessionHandle, string srcURI, string destURI)'
  print '  i32 setHostNameIDL(i32 sessionHandle, string hostName)'
  print '  i32 deleteHostNameIDL(i32 sessionHandle)'
  print '  i32 setDomainNameIDL(i32 sessionId, string domain, string vrfName)'
  print '  i32 removeDomainNameIDL(i32 sessionId, string vrfName)'
  print '  string getDomainNameIDL(i32 sessionId, string vrfName)'
  print '   getDNSServerListIDL(i32 sessionId, string vrfName)'
  print '  i32 addDNSServerIDL(i32 sessionId, DNSServerIDL server)'
  print '  i32 removeDNSServerIDL(i32 sessionId, NetworkAddressIDL addr, string vrfName)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ElementConfigIDL.Client(protocol)
transport.open()

if cmd == 'createSnmpHostIDL':
  if len(args) != 2:
    print 'createSnmpHostIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.createSnmpHostIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'getSnmpHostsIDL':
  if len(args) != 1:
    print 'getSnmpHostsIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.getSnmpHostsIDL(eval(args[0]),))

elif cmd == 'deleteSnmpHostIDL':
  if len(args) != 2:
    print 'deleteSnmpHostIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteSnmpHostIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'setSnmpTrapIDL':
  if len(args) != 3:
    print 'setSnmpTrapIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.setSnmpTrapIDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'writeMemIDL':
  if len(args) != 1:
    print 'writeMemIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.writeMemIDL(eval(args[0]),))

elif cmd == 'createSyslogHostIDL':
  if len(args) != 2:
    print 'createSyslogHostIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.createSyslogHostIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'getSyslogHostListIDL':
  if len(args) != 1:
    print 'getSyslogHostListIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.getSyslogHostListIDL(eval(args[0]),))

elif cmd == 'removeSyslogHostIDL':
  if len(args) != 2:
    print 'removeSyslogHostIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.removeSyslogHostIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'setSyslogFacilityTypeIDL':
  if len(args) != 2:
    print 'setSyslogFacilityTypeIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.setSyslogFacilityTypeIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'setSyslogTrapLevelIDL':
  if len(args) != 2:
    print 'setSyslogTrapLevelIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.setSyslogTrapLevelIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'getSyslogFacilityTypeIDL':
  if len(args) != 1:
    print 'getSyslogFacilityTypeIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.getSyslogFacilityTypeIDL(eval(args[0]),))

elif cmd == 'getSyslogTrapLevelIDL':
  if len(args) != 1:
    print 'getSyslogTrapLevelIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.getSyslogTrapLevelIDL(eval(args[0]),))

elif cmd == 'setTACACSSharedKeyIDL':
  if len(args) != 2:
    print 'setTACACSSharedKeyIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.setTACACSSharedKeyIDL(eval(args[0]),args[1],))

elif cmd == 'deleteTACACSSharedKeyIDL':
  if len(args) != 1:
    print 'deleteTACACSSharedKeyIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.deleteTACACSSharedKeyIDL(eval(args[0]),))

elif cmd == 'getTACACSServersIDL':
  if len(args) != 1:
    print 'getTACACSServersIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.getTACACSServersIDL(eval(args[0]),))

elif cmd == 'addTACACSServerIDL':
  if len(args) != 2:
    print 'addTACACSServerIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.addTACACSServerIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'deleteTACACSServerIDL':
  if len(args) != 2:
    print 'deleteTACACSServerIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteTACACSServerIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'getLocalAuthUsersIDL':
  if len(args) != 1:
    print 'getLocalAuthUsersIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.getLocalAuthUsersIDL(eval(args[0]),))

elif cmd == 'addLocalAuthUserIDL':
  if len(args) != 2:
    print 'addLocalAuthUserIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.addLocalAuthUserIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'deleteLocalAuthUserIDL':
  if len(args) != 2:
    print 'deleteLocalAuthUserIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteLocalAuthUserIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'copyIDL':
  if len(args) != 3:
    print 'copyIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.copyIDL(eval(args[0]),args[1],args[2],))

elif cmd == 'setHostNameIDL':
  if len(args) != 2:
    print 'setHostNameIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.setHostNameIDL(eval(args[0]),args[1],))

elif cmd == 'deleteHostNameIDL':
  if len(args) != 1:
    print 'deleteHostNameIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.deleteHostNameIDL(eval(args[0]),))

elif cmd == 'setDomainNameIDL':
  if len(args) != 3:
    print 'setDomainNameIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.setDomainNameIDL(eval(args[0]),args[1],args[2],))

elif cmd == 'removeDomainNameIDL':
  if len(args) != 2:
    print 'removeDomainNameIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.removeDomainNameIDL(eval(args[0]),args[1],))

elif cmd == 'getDomainNameIDL':
  if len(args) != 2:
    print 'getDomainNameIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.getDomainNameIDL(eval(args[0]),args[1],))

elif cmd == 'getDNSServerListIDL':
  if len(args) != 2:
    print 'getDNSServerListIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.getDNSServerListIDL(eval(args[0]),args[1],))

elif cmd == 'addDNSServerIDL':
  if len(args) != 2:
    print 'addDNSServerIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.addDNSServerIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'removeDNSServerIDL':
  if len(args) != 3:
    print 'removeDNSServerIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.removeDNSServerIDL(eval(args[0]),eval(args[1]),args[2],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
