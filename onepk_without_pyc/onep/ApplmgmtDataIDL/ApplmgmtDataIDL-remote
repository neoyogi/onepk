#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import ApplmgmtDataIDL
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  i32 ApplManagedData_setConfigIDL(i32 sessionHandle, string app_version, string app_instance, string app_config_domain)'
  print '  string ApplManagedData_getConfigIDL(i32 sessionHandle, string app_data_name)'
  print '  string ApplManagedData_getKeyedDataIDL(i32 sessionHandle, string app_data_request)'
  print '  i32 ApplManagedData_setShowDataIDL(i32 sessionHandle, string private_show_data_name, string private_show_data_value)'
  print '  i32 ApplManagedData_installXsdIDL(i32 sessionHandle, string XSD_contents, string config_domain, i32 overwrite)'
  print '  i32 ApplManagedData_uninstallXsdIDL(i32 sessionHandle, string app_name, string version, string config_domain)'
  print '  i32 ApplManagedData_isXsdInstalledIDL(i32 sessionHandle, string app_name, string version, string config_domain)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ApplmgmtDataIDL.Client(protocol)
transport.open()

if cmd == 'ApplManagedData_setConfigIDL':
  if len(args) != 4:
    print 'ApplManagedData_setConfigIDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.ApplManagedData_setConfigIDL(eval(args[0]),args[1],args[2],args[3],))

elif cmd == 'ApplManagedData_getConfigIDL':
  if len(args) != 2:
    print 'ApplManagedData_getConfigIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.ApplManagedData_getConfigIDL(eval(args[0]),args[1],))

elif cmd == 'ApplManagedData_getKeyedDataIDL':
  if len(args) != 2:
    print 'ApplManagedData_getKeyedDataIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.ApplManagedData_getKeyedDataIDL(eval(args[0]),args[1],))

elif cmd == 'ApplManagedData_setShowDataIDL':
  if len(args) != 3:
    print 'ApplManagedData_setShowDataIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.ApplManagedData_setShowDataIDL(eval(args[0]),args[1],args[2],))

elif cmd == 'ApplManagedData_installXsdIDL':
  if len(args) != 4:
    print 'ApplManagedData_installXsdIDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.ApplManagedData_installXsdIDL(eval(args[0]),args[1],args[2],eval(args[3]),))

elif cmd == 'ApplManagedData_uninstallXsdIDL':
  if len(args) != 4:
    print 'ApplManagedData_uninstallXsdIDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.ApplManagedData_uninstallXsdIDL(eval(args[0]),args[1],args[2],args[3],))

elif cmd == 'ApplManagedData_isXsdInstalledIDL':
  if len(args) != 4:
    print 'ApplManagedData_isXsdInstalledIDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.ApplManagedData_isXsdInstalledIDL(eval(args[0]),args[1],args[2],args[3],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
