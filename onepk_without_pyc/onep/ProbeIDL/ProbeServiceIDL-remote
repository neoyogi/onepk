#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import ProbeServiceIDL
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  ProbeHandleIDL Probe_startIDL(i32 sessionId, ProbeIDL probe)'
  print '  i32 Probe_stopIDL(i32 sessionId, i32 probeId, i32 eventHandle)'
  print '  i32 Probe_destroyIDL(i32 sessionId, i32 probeId)'
  print '  ProbeStatsIDL Probe_getStatsIDL(i32 sessionId, i32 probeId)'
  print '  i32 Probe_testIDL(i32 sessionId, i32 probeId, i32 eventHandle, i32 TestType)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ProbeServiceIDL.Client(protocol)
transport.open()

if cmd == 'Probe_startIDL':
  if len(args) != 2:
    print 'Probe_startIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.Probe_startIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'Probe_stopIDL':
  if len(args) != 3:
    print 'Probe_stopIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.Probe_stopIDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'Probe_destroyIDL':
  if len(args) != 2:
    print 'Probe_destroyIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.Probe_destroyIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'Probe_getStatsIDL':
  if len(args) != 2:
    print 'Probe_getStatsIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.Probe_getStatsIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'Probe_testIDL':
  if len(args) != 4:
    print 'Probe_testIDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.Probe_testIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
