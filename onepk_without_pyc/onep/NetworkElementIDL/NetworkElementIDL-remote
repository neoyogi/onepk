#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import NetworkElementIDL
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  ElementPropertyIDL NetworkElement_connectIDL(string appname, string hostname, string username, string password, i32 timeout, i32 sessionHandle, OnepVersionIDL version, i32 ka_idle_time, VmCredentialIDL cred)'
  print '  i32 NetworkElement_evtChannelIDL(i32 sessionHandle)'
  print '  i32 NetworkElement_createSyslogMsgIDL(i32 sessionHandle, i32 severity, string message)'
  print '  i64 NetworkElement_getSysUpTimeIDL(i32 sessionHandle)'
  print '  string NetworkElement_getSysNameIDL(i32 sessionHandle)'
  print '  i32 NetworkElement_disconnectIDL()'
  print '   NetworkElement_getFruListIDL(i32 sessionHandle)'
  print '  OnepVersionIDL NetworkElement_getVersionIDL(i32 sessionHandle, i32 pkgid)'
  print '  i32 NetworkElement_checkVersionIDL(i32 sessionHandle, OnepVersionIDL ver, i32 pkgid)'
  print '  i32 NetworkElement_enableOptionalSSIDL(i32 sessionHandle, i32 ssid)'
  print '   NetworkElement_getBDListIDL(i32 sessionHandle)'
  print '   BridgeDomain_getBDMemberInterfaceListIDL(i32 sessionHandle, i32 id)'
  print '  MacAddressIDL NetworkElement_getMacAddressIDL()'
  print '  EventHandleIDL Event_unregisterIDL(i32 sessionHandle, i32 eventHandle)'
  print '  EventHandleIDL ApplEvent_registerIDL(i32 sessionHandle, i32 applID, i32 type, i32 maxrun_sec, i32 maxrun_msec)'
  print '  EventHandleIDL CLIEvent_registerIDL(i32 sessionHandle, i32 occurs, i32 skip, i32 sync, i32 timeout_rc, i32 period_sec, i32 period_msec, string pattern, i32 maxrun_sec, i32 maxrun_msec)'
  print '  EventHandleIDL SyslogEvent_registerIDL(i32 sessionHandle, string pattern, i32 occurs, i32 priority, i32 period_sec, i32 period_msec, i32 maxrun_sec, i32 maxrun_msec)'
  print '  EventHandleIDL OIREvent_registerIDL(i32 sessionHandle, i32 oirType)'
  print '  EventHandleIDL InterfaceAddrChangeEvent_registerIDL(i32 sessionHandle, i32 family, InterfaceFilterIDL iffIDL)'
  print '  EventHandleIDL PortChannelEvent_registerIDL(i32 sessionHandle, PortChannelFilterIDL filter)'
  print '  EventHandleIDL InterfaceCreateDeleteEvent_registerIDL(i32 sessionHandle, InterfaceCreateDeleteFilterIDL filter)'
  print '  EventHandleIDL InterfaceCTXEnableDisableEvent_registerIDL(i32 sessionHandle, InterfaceCTXEnableDisableFilterIDL filter)'
  print '  EventHandleIDL InterfaceStatisticsPollEvent_registerIDL(i32 sessionHandle, i64 xosHandle, i32 interfaceType, i32 interval)'
  print '  EventHandleIDL HsrpStateEvent_registerIDL(i32 sessionHandle, HsrpInstanceFilterIDL filter)'
  print '  i32 getHsrpStateIDL(i32 sessionHandle, HsrpInstanceFilterIDL filter)'
  print '  i32 ApplEvent_publishIDL(i32 sessionHandle, i32 applID, i32 type, string data1, string data2, string data3, string data4)'
  print '  EventHandleIDL BDEvent_registerIDL(i32 sessionHandle, BDFilterIDL filter)'
  print '  EventHandleIDL BDServiceStatusEvent_registerIDL(i32 sessionHandle)'
  print '  i32 AsyncMsg_notifySenderIDL(i32 sessionHandle, i32 asyncHandle)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = NetworkElementIDL.Client(protocol)
transport.open()

if cmd == 'NetworkElement_connectIDL':
  if len(args) != 9:
    print 'NetworkElement_connectIDL requires 9 args'
    sys.exit(1)
  pp.pprint(client.NetworkElement_connectIDL(args[0],args[1],args[2],args[3],eval(args[4]),eval(args[5]),eval(args[6]),eval(args[7]),eval(args[8]),))

elif cmd == 'NetworkElement_evtChannelIDL':
  if len(args) != 1:
    print 'NetworkElement_evtChannelIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.NetworkElement_evtChannelIDL(eval(args[0]),))

elif cmd == 'NetworkElement_createSyslogMsgIDL':
  if len(args) != 3:
    print 'NetworkElement_createSyslogMsgIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.NetworkElement_createSyslogMsgIDL(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'NetworkElement_getSysUpTimeIDL':
  if len(args) != 1:
    print 'NetworkElement_getSysUpTimeIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.NetworkElement_getSysUpTimeIDL(eval(args[0]),))

elif cmd == 'NetworkElement_getSysNameIDL':
  if len(args) != 1:
    print 'NetworkElement_getSysNameIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.NetworkElement_getSysNameIDL(eval(args[0]),))

elif cmd == 'NetworkElement_disconnectIDL':
  if len(args) != 0:
    print 'NetworkElement_disconnectIDL requires 0 args'
    sys.exit(1)
  pp.pprint(client.NetworkElement_disconnectIDL())

elif cmd == 'NetworkElement_getFruListIDL':
  if len(args) != 1:
    print 'NetworkElement_getFruListIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.NetworkElement_getFruListIDL(eval(args[0]),))

elif cmd == 'NetworkElement_getVersionIDL':
  if len(args) != 2:
    print 'NetworkElement_getVersionIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.NetworkElement_getVersionIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'NetworkElement_checkVersionIDL':
  if len(args) != 3:
    print 'NetworkElement_checkVersionIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.NetworkElement_checkVersionIDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'NetworkElement_enableOptionalSSIDL':
  if len(args) != 2:
    print 'NetworkElement_enableOptionalSSIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.NetworkElement_enableOptionalSSIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'NetworkElement_getBDListIDL':
  if len(args) != 1:
    print 'NetworkElement_getBDListIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.NetworkElement_getBDListIDL(eval(args[0]),))

elif cmd == 'BridgeDomain_getBDMemberInterfaceListIDL':
  if len(args) != 2:
    print 'BridgeDomain_getBDMemberInterfaceListIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.BridgeDomain_getBDMemberInterfaceListIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'NetworkElement_getMacAddressIDL':
  if len(args) != 0:
    print 'NetworkElement_getMacAddressIDL requires 0 args'
    sys.exit(1)
  pp.pprint(client.NetworkElement_getMacAddressIDL())

elif cmd == 'Event_unregisterIDL':
  if len(args) != 2:
    print 'Event_unregisterIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.Event_unregisterIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'ApplEvent_registerIDL':
  if len(args) != 5:
    print 'ApplEvent_registerIDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.ApplEvent_registerIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'CLIEvent_registerIDL':
  if len(args) != 10:
    print 'CLIEvent_registerIDL requires 10 args'
    sys.exit(1)
  pp.pprint(client.CLIEvent_registerIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),eval(args[6]),args[7],eval(args[8]),eval(args[9]),))

elif cmd == 'SyslogEvent_registerIDL':
  if len(args) != 8:
    print 'SyslogEvent_registerIDL requires 8 args'
    sys.exit(1)
  pp.pprint(client.SyslogEvent_registerIDL(eval(args[0]),args[1],eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),eval(args[6]),eval(args[7]),))

elif cmd == 'OIREvent_registerIDL':
  if len(args) != 2:
    print 'OIREvent_registerIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.OIREvent_registerIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'InterfaceAddrChangeEvent_registerIDL':
  if len(args) != 3:
    print 'InterfaceAddrChangeEvent_registerIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.InterfaceAddrChangeEvent_registerIDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'PortChannelEvent_registerIDL':
  if len(args) != 2:
    print 'PortChannelEvent_registerIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.PortChannelEvent_registerIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'InterfaceCreateDeleteEvent_registerIDL':
  if len(args) != 2:
    print 'InterfaceCreateDeleteEvent_registerIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.InterfaceCreateDeleteEvent_registerIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'InterfaceCTXEnableDisableEvent_registerIDL':
  if len(args) != 2:
    print 'InterfaceCTXEnableDisableEvent_registerIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.InterfaceCTXEnableDisableEvent_registerIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'InterfaceStatisticsPollEvent_registerIDL':
  if len(args) != 4:
    print 'InterfaceStatisticsPollEvent_registerIDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.InterfaceStatisticsPollEvent_registerIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'HsrpStateEvent_registerIDL':
  if len(args) != 2:
    print 'HsrpStateEvent_registerIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.HsrpStateEvent_registerIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'getHsrpStateIDL':
  if len(args) != 2:
    print 'getHsrpStateIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.getHsrpStateIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'ApplEvent_publishIDL':
  if len(args) != 7:
    print 'ApplEvent_publishIDL requires 7 args'
    sys.exit(1)
  pp.pprint(client.ApplEvent_publishIDL(eval(args[0]),eval(args[1]),eval(args[2]),args[3],args[4],args[5],args[6],))

elif cmd == 'BDEvent_registerIDL':
  if len(args) != 2:
    print 'BDEvent_registerIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.BDEvent_registerIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'BDServiceStatusEvent_registerIDL':
  if len(args) != 1:
    print 'BDServiceStatusEvent_registerIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.BDServiceStatusEvent_registerIDL(eval(args[0]),))

elif cmd == 'AsyncMsg_notifySenderIDL':
  if len(args) != 2:
    print 'AsyncMsg_notifySenderIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.AsyncMsg_notifySenderIDL(eval(args[0]),eval(args[1]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
