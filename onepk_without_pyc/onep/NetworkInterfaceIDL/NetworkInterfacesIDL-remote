#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import NetworkInterfacesIDL
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '   NetworkElement_getInterfaceListIDL(i32 sessionHandle, i64 xoshandle, i32 ifType, i32 tag, i32 slot)'
  print '  NetworkInterfaceIDL NetworkElement_getInterfaceByNameIDL(string ifname)'
  print '  NetworkInterfaceIDL NetworkElement_getInterfaceByIifIdIDL(i64 iif_id)'
  print '  NetworkInterfaceIDL NetworkElement_getInterfaceByIdIDL(i64 if_id)'
  print '  InterfacePropertyIDL NetworkInterface_getPropertyIDL(i64 xosHandle)'
  print '  IssubInterfaceIDL NetworkInterface_issubInterfaceIDL(i64 xosHandle)'
  print '  InterfaceConfigIDL NetworkInterface_getConfigIDL(i64 xosHandle)'
  print '  InterfaceStatusIDL NetworkInterface_getStatusIDL(i64 xosHandle)'
  print '   NetworkInterface_getStatisticsIDL(i64 xosHandle)'
  print '  NetworkInterfaceIDL NetworkInterface_getParentIDL(i64 xosHandle)'
  print '   NetworkInterface_getSubInterfaceIDL(i64 xosHandle)'
  print '   NetworkInterface_getAddressListIDL(i64 xoshandle)'
  print '   NetworkInterface_getPrefixListIDL(i64 xoshandle)'
  print '  i32 NetworkInterface_setInterfaceShutdownIDL(i64 xosHandle, i32 shutdown)'
  print '  i32 NetworkInterface_clearStatisticsIDL(i64 xosHandle)'
  print '  i32 NetworkInterface_setDescriptionIDL(i64 xosHandle, string description)'
  print '  i32 NetworkInterface_setIpHelperIDL(i64 xosHandle, NetworkAddressIDL addr, string vrf, i32 setUnset)'
  print '  i32 NetworkInterface_setIpProxyArpIDL(i64 xosHandle, i32 setUnset)'
  print '  i32 NetworkInterface_setIpUnreachableIDL(i64 xosHandle, i32 setUnset)'
  print '  i32 NetworkInterface_setIpRedirectIDL(i64 xosHandle, i32 setUnset)'
  print '  i32 NetworkInterface_setIpUnicastReversePathIDL(i64 xosHandle, string ipAccessList, i32 setUnset)'
  print '  i32 NetworkInterface_setLoadIntervalIDL(i64 xosHandle, i32 interval)'
  print '  i32 NetworkInterface_setMTUIDL(i64 xosHandle, i32 mtu)'
  print '  i32 NetworkInterface_setFwdClassIDL(i64 xosHandle, i32 cid)'
  print '  i32 NetworkInterface_setEncapIDL(i64 xosHandle, i32 encap)'
  print '  i32 NetworkInterface_setBwIDL(i64 xosHandle, i32 bw)'
  print '  i32 NetworkInterface_setAddressIDL(i64 xosHandle, i32 opertype, i32 scope, NetworkAddressIDL addr, i16 prefix_len)'
  print '  i32 NetworkInterface_setSwitchportModeIDL(i64 xosHandle, i32 mode)'
  print '  i32 NetworkInterface_setLayer2IDL(i64 xosHandle, i32 layer2)'
  print '  i32 NetworkInterface_registerApplicationTagIDL(i32 sessionHandle, string apptag)'
  print '  i32 NetworkInterface_setTagIDL(i64 xosHandle, i32 tag)'
  print '  NetworkInterfaceIDL NetworkInterface_getSubInterfaceByIdIDL(i64 xosHandle, i32 type, i64 id)'
  print '  EventHandleIDL InterfaceStateEvent_registerIDL(i32 sessionHandle, i64 xosHandle, i32 interfaceType, i32 stateEventType, i32 maxrun_sec, i32 maxrun_msec)'
  print '  EventHandleIDL InterfaceStatisticsEvent_registerIDL(i32 sessionHandle, i64 xosHandle, i32 parameter, i32 poll_interval_sec, i32 poll_interval_msec, i32 entry_value, i32 entry_op, i32 entry_type, i32 exit_value_set, i32 exit_value, i32 exit_op, i32 exit_type, i32 exit_comb, i32 exit_time_sec, i32 exit_time_msec, i32 exit_event, i32 average_factor, i32 maxrun_sec, i32 maxrun_msec)'
  print '  EventHandleIDL InterfaceMtuEvent_registerIDL(i32 sessionHandle, i64 xosHandle, i32 interfaceType)'
  print '  EventHandleIDL InterfaceSpeedEvent_registerIDL(i32 sessionHandle, i64 xosHandle, i32 interfaceType)'
  print '  EventHandleIDL InterfaceDuplexModeEvent_registerIDL(i32 sessionHandle, i64 xosHandle, i32 interfaceType)'
  print '  EventHandleIDL InterfaceAutoNegotiateEvent_registerIDL(i32 sessionHandle, i64 xosHandle, i32 interfaceType)'
  print '  EventHandleIDL InterfaceFlowcontrolEvent_registerIDL(i32 sessionHandle, i64 xosHandle, i32 interfaceType)'
  print '  EventHandleIDL InterfaceLayer2ModeEvent_registerIDL(i32 sessionHandle, i64 xosHandle, i32 interfaceType)'
  print '  EventHandleIDL InterfaceForwardClassIDEvent_registerIDL(i32 sessionHandle, i64 xosHandle, i32 interfaceType)'
  print '  EventHandleIDL InterfaceBandwidthEvent_registerIDL(i32 sessionHandle, i64 xosHandle, i32 interfaceType)'
  print '  EventHandleIDL InterfaceVrfEvent_registerIDL(i32 sessionHandle, i64 xosHandle, i32 interfaceType, string vrfname)'
  print '  EventHandleIDL InterfaceVlanEvent_registerIDL(i32 sessionHandle, i64 xosHandle, i32 interfaceType, i32 vlanEvtType)'
  print '  string NetworkInterface_getVrfIDL(i64 xosHandle)'
  print '  InterfaceVlanIDL NetworkInterface_getVlanIDL(i64 xosHandle)'
  print '  i64 NetworkInterface_createConfigIDL(i32 sessionHandle, i32 type, i32 index, i64 parentHandle, i32 add)'
  print '  BDInstanceIDL NetworkInterface_getBDInstanceIDL(i64 xosHandle)'
  print '   PChannel_getMembersIDL(i32 sessionHandle, i64 xosHandle)'
  print '  i32 PChannel_getMemberModeIDL(i32 sessionHandle, i64 xosHandle)'
  print '  i16 PChannel_getMemberPriorityIDL(i32 sessionHandle, i64 xosHandle)'
  print '  NetworkInterfaceIDL NetworkInterface_getPChannelIDL(i32 sessionHandle, i64 xosHandle)'
  print '  i64 NetworkInterface_getIifIdIDL(i64 xosHandle)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = NetworkInterfacesIDL.Client(protocol)
transport.open()

if cmd == 'NetworkElement_getInterfaceListIDL':
  if len(args) != 5:
    print 'NetworkElement_getInterfaceListIDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.NetworkElement_getInterfaceListIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'NetworkElement_getInterfaceByNameIDL':
  if len(args) != 1:
    print 'NetworkElement_getInterfaceByNameIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.NetworkElement_getInterfaceByNameIDL(args[0],))

elif cmd == 'NetworkElement_getInterfaceByIifIdIDL':
  if len(args) != 1:
    print 'NetworkElement_getInterfaceByIifIdIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.NetworkElement_getInterfaceByIifIdIDL(eval(args[0]),))

elif cmd == 'NetworkElement_getInterfaceByIdIDL':
  if len(args) != 1:
    print 'NetworkElement_getInterfaceByIdIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.NetworkElement_getInterfaceByIdIDL(eval(args[0]),))

elif cmd == 'NetworkInterface_getPropertyIDL':
  if len(args) != 1:
    print 'NetworkInterface_getPropertyIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_getPropertyIDL(eval(args[0]),))

elif cmd == 'NetworkInterface_issubInterfaceIDL':
  if len(args) != 1:
    print 'NetworkInterface_issubInterfaceIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_issubInterfaceIDL(eval(args[0]),))

elif cmd == 'NetworkInterface_getConfigIDL':
  if len(args) != 1:
    print 'NetworkInterface_getConfigIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_getConfigIDL(eval(args[0]),))

elif cmd == 'NetworkInterface_getStatusIDL':
  if len(args) != 1:
    print 'NetworkInterface_getStatusIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_getStatusIDL(eval(args[0]),))

elif cmd == 'NetworkInterface_getStatisticsIDL':
  if len(args) != 1:
    print 'NetworkInterface_getStatisticsIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_getStatisticsIDL(eval(args[0]),))

elif cmd == 'NetworkInterface_getParentIDL':
  if len(args) != 1:
    print 'NetworkInterface_getParentIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_getParentIDL(eval(args[0]),))

elif cmd == 'NetworkInterface_getSubInterfaceIDL':
  if len(args) != 1:
    print 'NetworkInterface_getSubInterfaceIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_getSubInterfaceIDL(eval(args[0]),))

elif cmd == 'NetworkInterface_getAddressListIDL':
  if len(args) != 1:
    print 'NetworkInterface_getAddressListIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_getAddressListIDL(eval(args[0]),))

elif cmd == 'NetworkInterface_getPrefixListIDL':
  if len(args) != 1:
    print 'NetworkInterface_getPrefixListIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_getPrefixListIDL(eval(args[0]),))

elif cmd == 'NetworkInterface_setInterfaceShutdownIDL':
  if len(args) != 2:
    print 'NetworkInterface_setInterfaceShutdownIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_setInterfaceShutdownIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'NetworkInterface_clearStatisticsIDL':
  if len(args) != 1:
    print 'NetworkInterface_clearStatisticsIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_clearStatisticsIDL(eval(args[0]),))

elif cmd == 'NetworkInterface_setDescriptionIDL':
  if len(args) != 2:
    print 'NetworkInterface_setDescriptionIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_setDescriptionIDL(eval(args[0]),args[1],))

elif cmd == 'NetworkInterface_setIpHelperIDL':
  if len(args) != 4:
    print 'NetworkInterface_setIpHelperIDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_setIpHelperIDL(eval(args[0]),eval(args[1]),args[2],eval(args[3]),))

elif cmd == 'NetworkInterface_setIpProxyArpIDL':
  if len(args) != 2:
    print 'NetworkInterface_setIpProxyArpIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_setIpProxyArpIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'NetworkInterface_setIpUnreachableIDL':
  if len(args) != 2:
    print 'NetworkInterface_setIpUnreachableIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_setIpUnreachableIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'NetworkInterface_setIpRedirectIDL':
  if len(args) != 2:
    print 'NetworkInterface_setIpRedirectIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_setIpRedirectIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'NetworkInterface_setIpUnicastReversePathIDL':
  if len(args) != 3:
    print 'NetworkInterface_setIpUnicastReversePathIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_setIpUnicastReversePathIDL(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'NetworkInterface_setLoadIntervalIDL':
  if len(args) != 2:
    print 'NetworkInterface_setLoadIntervalIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_setLoadIntervalIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'NetworkInterface_setMTUIDL':
  if len(args) != 2:
    print 'NetworkInterface_setMTUIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_setMTUIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'NetworkInterface_setFwdClassIDL':
  if len(args) != 2:
    print 'NetworkInterface_setFwdClassIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_setFwdClassIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'NetworkInterface_setEncapIDL':
  if len(args) != 2:
    print 'NetworkInterface_setEncapIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_setEncapIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'NetworkInterface_setBwIDL':
  if len(args) != 2:
    print 'NetworkInterface_setBwIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_setBwIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'NetworkInterface_setAddressIDL':
  if len(args) != 5:
    print 'NetworkInterface_setAddressIDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_setAddressIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'NetworkInterface_setSwitchportModeIDL':
  if len(args) != 2:
    print 'NetworkInterface_setSwitchportModeIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_setSwitchportModeIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'NetworkInterface_setLayer2IDL':
  if len(args) != 2:
    print 'NetworkInterface_setLayer2IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_setLayer2IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'NetworkInterface_registerApplicationTagIDL':
  if len(args) != 2:
    print 'NetworkInterface_registerApplicationTagIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_registerApplicationTagIDL(eval(args[0]),args[1],))

elif cmd == 'NetworkInterface_setTagIDL':
  if len(args) != 2:
    print 'NetworkInterface_setTagIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_setTagIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'NetworkInterface_getSubInterfaceByIdIDL':
  if len(args) != 3:
    print 'NetworkInterface_getSubInterfaceByIdIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_getSubInterfaceByIdIDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'InterfaceStateEvent_registerIDL':
  if len(args) != 6:
    print 'InterfaceStateEvent_registerIDL requires 6 args'
    sys.exit(1)
  pp.pprint(client.InterfaceStateEvent_registerIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),))

elif cmd == 'InterfaceStatisticsEvent_registerIDL':
  if len(args) != 19:
    print 'InterfaceStatisticsEvent_registerIDL requires 19 args'
    sys.exit(1)
  pp.pprint(client.InterfaceStatisticsEvent_registerIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),eval(args[6]),eval(args[7]),eval(args[8]),eval(args[9]),eval(args[10]),eval(args[11]),eval(args[12]),eval(args[13]),eval(args[14]),eval(args[15]),eval(args[16]),eval(args[17]),eval(args[18]),))

elif cmd == 'InterfaceMtuEvent_registerIDL':
  if len(args) != 3:
    print 'InterfaceMtuEvent_registerIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.InterfaceMtuEvent_registerIDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'InterfaceSpeedEvent_registerIDL':
  if len(args) != 3:
    print 'InterfaceSpeedEvent_registerIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.InterfaceSpeedEvent_registerIDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'InterfaceDuplexModeEvent_registerIDL':
  if len(args) != 3:
    print 'InterfaceDuplexModeEvent_registerIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.InterfaceDuplexModeEvent_registerIDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'InterfaceAutoNegotiateEvent_registerIDL':
  if len(args) != 3:
    print 'InterfaceAutoNegotiateEvent_registerIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.InterfaceAutoNegotiateEvent_registerIDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'InterfaceFlowcontrolEvent_registerIDL':
  if len(args) != 3:
    print 'InterfaceFlowcontrolEvent_registerIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.InterfaceFlowcontrolEvent_registerIDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'InterfaceLayer2ModeEvent_registerIDL':
  if len(args) != 3:
    print 'InterfaceLayer2ModeEvent_registerIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.InterfaceLayer2ModeEvent_registerIDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'InterfaceForwardClassIDEvent_registerIDL':
  if len(args) != 3:
    print 'InterfaceForwardClassIDEvent_registerIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.InterfaceForwardClassIDEvent_registerIDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'InterfaceBandwidthEvent_registerIDL':
  if len(args) != 3:
    print 'InterfaceBandwidthEvent_registerIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.InterfaceBandwidthEvent_registerIDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'InterfaceVrfEvent_registerIDL':
  if len(args) != 4:
    print 'InterfaceVrfEvent_registerIDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.InterfaceVrfEvent_registerIDL(eval(args[0]),eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'InterfaceVlanEvent_registerIDL':
  if len(args) != 4:
    print 'InterfaceVlanEvent_registerIDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.InterfaceVlanEvent_registerIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'NetworkInterface_getVrfIDL':
  if len(args) != 1:
    print 'NetworkInterface_getVrfIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_getVrfIDL(eval(args[0]),))

elif cmd == 'NetworkInterface_getVlanIDL':
  if len(args) != 1:
    print 'NetworkInterface_getVlanIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_getVlanIDL(eval(args[0]),))

elif cmd == 'NetworkInterface_createConfigIDL':
  if len(args) != 5:
    print 'NetworkInterface_createConfigIDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_createConfigIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'NetworkInterface_getBDInstanceIDL':
  if len(args) != 1:
    print 'NetworkInterface_getBDInstanceIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_getBDInstanceIDL(eval(args[0]),))

elif cmd == 'PChannel_getMembersIDL':
  if len(args) != 2:
    print 'PChannel_getMembersIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.PChannel_getMembersIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'PChannel_getMemberModeIDL':
  if len(args) != 2:
    print 'PChannel_getMemberModeIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.PChannel_getMemberModeIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'PChannel_getMemberPriorityIDL':
  if len(args) != 2:
    print 'PChannel_getMemberPriorityIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.PChannel_getMemberPriorityIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'NetworkInterface_getPChannelIDL':
  if len(args) != 2:
    print 'NetworkInterface_getPChannelIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_getPChannelIDL(eval(args[0]),eval(args[1]),))

elif cmd == 'NetworkInterface_getIifIdIDL':
  if len(args) != 1:
    print 'NetworkInterface_getIifIdIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.NetworkInterface_getIifIdIDL(eval(args[0]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
