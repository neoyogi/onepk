#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import OneFwIDL
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  i32 createPropVector_IDL(i32 domain_id, i64 policy_version, PropositionSummary_IDL summary)'
  print '  i32 destroyPropVector_IDL(i32 domain_id, i64 policy_version)'
  print '  i32 addPropToVector_IDL(i32 domain_id, Proposition_IDL prop)'
  print '  i32 removePropFromVector_IDL(i32 domain_id, i32 id)'
  print '  i32 createTable_IDL(i32 domain_id, i32 type, i32 table_id, i64 policy_version, i64 persist_id, i32 combining_alg, i32 table_hierarchy, Table_IDL tbl)'
  print '  i32 destroyTable_IDL(i32 domain_id, i32 table_id)'
  print '  i32 addRowToTable_IDL(i32 domain_id, i32 table_id, Row_IDL row)'
  print '  i32 removeRowFromTable_IDL(i32 domain_id, i32 table_id, i32 row_id)'
  print '  i32 policyInstall_IDL(i32 domain_id, i64 policy_version, i64 config_version)'
  print '  CapabilityList_IDL Capabilities_getCapList_IDL()'
  print '  i32 addFlowRule_IDL(FlowRule_IDL flowRule)'
  print '  i32 load_nbar_pp_IDL(NbarProtocolPack_IDL proto_pack)'
  print '  i32 add_AVC_group_IDL(i32 type_id,  apps)'
  print '  i32 AVC_groups_complete_IDL(i64 version)'
  print '  i32 add_AVC_IDL(string name, i32 unified_id, string display_name, i32 nbar_id)'
  print '  i32 AVC_complete_IDL(i64 version)'
  print '  i32 init_IDL()'
  print '  i32 deinit_IDL()'
  print '  i32 syslog_cfg_IDL(i32 domain_id, byte enable, i32 level, i32 interval_len, i32 msg_count)'
  print '  i32 domain_cfg_IDL(i32 domain_id, Channel_IDL events, Channel_IDL syslog_chnl, Channel_IDL dp_stats, Channel_IDL dp_user_stats, Channel_IDL pcap, Channel_IDL appnav, i32 wse_enabled, i32 ips_enabled)'
  print '  i32 createIntfMapTable_IDL()'
  print '  i32 destroyIntfMapTable_IDL()'
  print '  i32 addIntfMapTable_IDL( intfMapTbl)'
  print '  i32 add_AVC_list_IDL( avcObj)'
  print '  i32 add_AVC_group_list_IDL( avcGroupObj)'
  print '  string get_IOSXE_Version_IDL()'
  print '  string get_nbar_eng_Version_IDL()'
  print '  i32 pcap_cfg_IDL(i32 domain_id, i32 capture_size, i32 rl_interval_length, i32 rl_packet_count, i32 buffer_size, i32 circular_buffer)'
  print '  i32 pcap_drop_capture_cfg_IDL(i32 domain_id, byte enable)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = OneFwIDL.Client(protocol)
transport.open()

if cmd == 'createPropVector_IDL':
  if len(args) != 3:
    print 'createPropVector_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.createPropVector_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'destroyPropVector_IDL':
  if len(args) != 2:
    print 'destroyPropVector_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.destroyPropVector_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'addPropToVector_IDL':
  if len(args) != 2:
    print 'addPropToVector_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.addPropToVector_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'removePropFromVector_IDL':
  if len(args) != 2:
    print 'removePropFromVector_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.removePropFromVector_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'createTable_IDL':
  if len(args) != 8:
    print 'createTable_IDL requires 8 args'
    sys.exit(1)
  pp.pprint(client.createTable_IDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),eval(args[6]),eval(args[7]),))

elif cmd == 'destroyTable_IDL':
  if len(args) != 2:
    print 'destroyTable_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.destroyTable_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'addRowToTable_IDL':
  if len(args) != 3:
    print 'addRowToTable_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.addRowToTable_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'removeRowFromTable_IDL':
  if len(args) != 3:
    print 'removeRowFromTable_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.removeRowFromTable_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'policyInstall_IDL':
  if len(args) != 3:
    print 'policyInstall_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.policyInstall_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'Capabilities_getCapList_IDL':
  if len(args) != 0:
    print 'Capabilities_getCapList_IDL requires 0 args'
    sys.exit(1)
  pp.pprint(client.Capabilities_getCapList_IDL())

elif cmd == 'addFlowRule_IDL':
  if len(args) != 1:
    print 'addFlowRule_IDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.addFlowRule_IDL(eval(args[0]),))

elif cmd == 'load_nbar_pp_IDL':
  if len(args) != 1:
    print 'load_nbar_pp_IDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.load_nbar_pp_IDL(eval(args[0]),))

elif cmd == 'add_AVC_group_IDL':
  if len(args) != 2:
    print 'add_AVC_group_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.add_AVC_group_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'AVC_groups_complete_IDL':
  if len(args) != 1:
    print 'AVC_groups_complete_IDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.AVC_groups_complete_IDL(eval(args[0]),))

elif cmd == 'add_AVC_IDL':
  if len(args) != 4:
    print 'add_AVC_IDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.add_AVC_IDL(args[0],eval(args[1]),args[2],eval(args[3]),))

elif cmd == 'AVC_complete_IDL':
  if len(args) != 1:
    print 'AVC_complete_IDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.AVC_complete_IDL(eval(args[0]),))

elif cmd == 'init_IDL':
  if len(args) != 0:
    print 'init_IDL requires 0 args'
    sys.exit(1)
  pp.pprint(client.init_IDL())

elif cmd == 'deinit_IDL':
  if len(args) != 0:
    print 'deinit_IDL requires 0 args'
    sys.exit(1)
  pp.pprint(client.deinit_IDL())

elif cmd == 'syslog_cfg_IDL':
  if len(args) != 5:
    print 'syslog_cfg_IDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.syslog_cfg_IDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'domain_cfg_IDL':
  if len(args) != 9:
    print 'domain_cfg_IDL requires 9 args'
    sys.exit(1)
  pp.pprint(client.domain_cfg_IDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),eval(args[6]),eval(args[7]),eval(args[8]),))

elif cmd == 'createIntfMapTable_IDL':
  if len(args) != 0:
    print 'createIntfMapTable_IDL requires 0 args'
    sys.exit(1)
  pp.pprint(client.createIntfMapTable_IDL())

elif cmd == 'destroyIntfMapTable_IDL':
  if len(args) != 0:
    print 'destroyIntfMapTable_IDL requires 0 args'
    sys.exit(1)
  pp.pprint(client.destroyIntfMapTable_IDL())

elif cmd == 'addIntfMapTable_IDL':
  if len(args) != 1:
    print 'addIntfMapTable_IDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.addIntfMapTable_IDL(eval(args[0]),))

elif cmd == 'add_AVC_list_IDL':
  if len(args) != 1:
    print 'add_AVC_list_IDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.add_AVC_list_IDL(eval(args[0]),))

elif cmd == 'add_AVC_group_list_IDL':
  if len(args) != 1:
    print 'add_AVC_group_list_IDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.add_AVC_group_list_IDL(eval(args[0]),))

elif cmd == 'get_IOSXE_Version_IDL':
  if len(args) != 0:
    print 'get_IOSXE_Version_IDL requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_IOSXE_Version_IDL())

elif cmd == 'get_nbar_eng_Version_IDL':
  if len(args) != 0:
    print 'get_nbar_eng_Version_IDL requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_nbar_eng_Version_IDL())

elif cmd == 'pcap_cfg_IDL':
  if len(args) != 6:
    print 'pcap_cfg_IDL requires 6 args'
    sys.exit(1)
  pp.pprint(client.pcap_cfg_IDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),))

elif cmd == 'pcap_drop_capture_cfg_IDL':
  if len(args) != 2:
    print 'pcap_drop_capture_cfg_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.pcap_drop_capture_cfg_IDL(eval(args[0]),eval(args[1]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
