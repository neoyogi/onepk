#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import PolicyIDL
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  i32 createPolicy_IDL(i32 sessionId, i16 type, i32 policyHandle)'
  print '  i32 deletePolicy_IDL(i32 sessionId, i32 policyHandle)'
  print '  i32 deleteAllPolicies_IDL(i32 sessionId)'
  print '  i32 createClass_IDL(i32 sessionId, i32 classOper)'
  print '  i32 deleteClass_IDL(i32 sessionId, i32 classHandle)'
  print '  i32 addClassToPolicy_IDL(i32 policyHandle, i32 classHandle, i32 sequence)'
  print '  i32 removeClassFromPolicy_IDL(i32 policyHandle, i32 classHandle)'
  print '  i32 addChildToPolicy_IDL(i32 parentHandle, i32 childHandle, i32 classHandle)'
  print '  i32 removeChildFromPolicy_IDL(i32 parentHandle, i32 childHandle, i32 classHandle)'
  print '  i32 removeFilterFromClass_IDL(i32 classHandle, i32 filterHandle)'
  print '  i32 setFilterSense_IDL(i32 classHandle, i32 filterHandle, i32 sense)'
  print '  i32 addFilterAclToClass_IDL(i32 classHandle, i32 sense, i32 aclHandle)'
  print '  i32 addFilterDscpToClass_IDL(i32 classHandle, i32 sense,  dscp)'
  print '  i32 addFilterMplsToClass_IDL(i32 classHandle, i32 sense,  mplsExp)'
  print '  i32 addFilterDlciToClass_IDL(i32 classHandle, i32 sense, i16 dlci)'
  print '  i32 addFilterDeToClass_IDL(i32 classHandle, i32 sense)'
  print '  i32 addFilterL2CosToClass_IDL(i32 classHandle, i32 sense,  l2cos)'
  print '  i32 addFilterMacAddressToClass_IDL(i32 classHandle, i32 sense, MacAddress_IDL macAddress)'
  print '  i32 addFilterPktLenToClass_IDL(i32 classHandle, i32 sense, i32 min, i32 max)'
  print '  i32 addFilterProtocolToClass_IDL(i32 classHandle, i32 sense, string protocol, string subProtocol, string param)'
  print '  i32 addFilterQosGroupToClass_IDL(i32 classHandle, i32 sense, byte group)'
  print '  i32 addFilterRtpPortToClass_IDL(i32 classHandle, i32 sense, RtpPort_IDL rtpPort)'
  print '  i32 addFilterVlanToClass_IDL(i32 classHandle, i32 sense,  vlan)'
  print '  i32 removeActionFromClass_IDL(i32 policyHandle, i32 classHandle, i32 actionHandle)'
  print '  i32 addActionDropToClass_IDL(i32 policyHandle, i32 classHandle, i32 remoteSn, i32 appId, i32 localId)'
  print '  i32 addActionIfcToClass_IDL(i32 policyHandle, i32 classHandle, i64 ifHandle)'
  print '  i32 addActionNextHopToClass_IDL(i32 policyHandle, i32 classHandle, i32 addrAF, string nextHopAddress)'
  print '  i32 addActionMarkToClass_IDL(i32 policyHandle, i32 classHandle, MarkParam_IDL markParam)'
  print '  i32 addActionPoliceToClass_IDL(i32 policyHandle, i32 classHandle, PoliceParam_IDL policeParam)'
  print '  i32 addActionShapeToClass_IDL(i32 policyHandle, i32 classHandle, ShapeParam_IDL shapeParam)'
  print '  i32 addActionPriorityQueueToClass_IDL(i32 policyHandle, i32 classHandle, PriorityQueueParam_IDL queueParam)'
  print '  i32 addActionClassBasedQueueToClass_IDL(i32 policyHandle, i32 classHandle, ClassBasedQueueParam_IDL queueParam)'
  print '  i32 addActionFairQueueToClass_IDL(i32 policyHandle, i32 classHandle, FairQueueParam_IDL queueParam)'
  print '  i32 addActionQueueLimitToClass_IDL(i32 policyHandle, i32 classHandle, QueueLimitParam_IDL queueParam)'
  print '  i32 addActionWredToClass_IDL(i32 policyHandle, i32 classHandle, i32 type, i32 ecnEnabled, i32 exponWeight, i32 thresholdUnits)'
  print '  i32 addWredProfileToClass_IDL(i32 policyHandle, i32 classHandle, i32 type, i32 value, i32 minThreshold, i32 maxThreshold, i32 thresholdUnits, i32 dropProb)'
  print '  i32 removeWredProfileFromClass_IDL(i32 policyHandle, i32 classHandle, i32 type, i32 value, i32 minThreshold, i32 maxThreshold, i32 thresholdUnits, i32 dropProb)'
  print '  i32 addActionCopyToClass_IDL(i32 policyHandle, i32 classHandle, i32 remoteSn, i32 appId, i32 localId, i32 size, i32 sampleType, i32 sampleRate)'
  print '  i32 addActionDivertToClass_IDL(i32 policyHandle, i32 classHandle, i32 remoteSn, i32 appId, i32 localId, i32 stateless)'
  print '  i32 addActionCopyToAce_IDL(i32 aclHandle, i32 aceHandle, i32 remoteSn, i32 appId, i32 localId, i32 size, i32 sampleType, i32 sampleRate)'
  print '  i32 addActionDivertToAce_IDL(i32 aclHandle, i32 aceHandle, i32 remoteSn, i32 appId, i32 localId)'
  print '  i32 removeActionFromAce_IDL(i32 aclHandle, i32 aceHandle, i32 actionHandle)'
  print '  i32 applyPolicyToTarget_IDL(i32 policyHandle, i64 ifHandle, byte location)'
  print '  i32 removePolicyFromTarget_IDL(i32 policyHandle, i64 ifHandle, byte location)'
  print '  i32 createAcl_IDL(i32 sessionId, i32 type, i32 persistent, i32 addrFamily)'
  print '  i32 deleteAcl_IDL(i32 sessionId, i32 aclHandle)'
  print '   getL3AceList_IDL(i32 aclHandle, i32 lifetime, string aclName, i32 addrFamily)'
  print '   getAceList_IDL(i32 aclHandle)'
  print '   getL2AceList_IDL(i32 aclHandle, string aclName)'
  print '   getAclList_IDL(i32 aclType)'
  print '   getIfcAclList_IDL(i64 ifHandle, i16 direction, i32 aclType)'
  print '  AclHeader_IDL getAclByName_IDL(string aclName)'
  print '  string getAclName_IDL(i32 aclHandle)'
  print '  i32 addL3Ace_IDL(i32 aclHandle, L3AceParam_IDL aceParam)'
  print '  i32 addL2Ace_IDL(i32 aclHandle, L2AceParam_IDL aceParam)'
  print '  i32 deleteAce_IDL(i32 aclHandle, i32 elemHandle)'
  print '  i32 applyAclToInterface_IDL(i32 aclHandle, i64 ifHandle, i16 direction)'
  print '  i32 removeAclFromInterface_IDL(i32 aclHandle, i64 ifHandle, i16 direction)'
  print '  i64 getAceMatch_IDL(i32 aclHandle, i32 elemHandle)'
  print '  i32 clearAclMatch_IDL(i32 aclHandle)'
  print '  PolicyCapabilityIDL getPolicyCapability_IDL(i32 handle)'
  print '   getProtocolCapability_IDL(i32 handle)'
  print '   getSubProtocolCapability_IDL(string protocol)'
  print '  AclHeader_IDL createNamedAcl_IDL(i32 sessionId, i32 type, i32 persistent, i32 addrFamily)'
  print '  i32 deleteNamedAcl_IDL(i32 sessionId, string name, i32 aclHandle, i32 lifetime, i32 addrFamily)'
  print '  i32 addNamedL3Ace_IDL(string name, i32 aclHandle, i32 lifetime, i32 addrFamily, L3AceParam_IDL aceParam)'
  print '  i32 deleteNamedAce_IDL(string name, i32 aclHandle, i32 elemHandle, i32 lifetime, i32 addrFamily)'
  print '  i32 applyNamedAclToInterface_IDL(string name, i32 aclType, i64 ifHandle, i16 direction, i32 addrFamily)'
  print '  i32 removeNamedAclFromInterface_IDL(string name, i32 aclType, i64 ifHandle, i16 direction, i32 addrFamily)'
  print '  i64 getNamedAceMatch_IDL(string name, i32 aclHandle, i32 elemHandle, i32 lifetime, i32 addrFamily)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = PolicyIDL.Client(protocol)
transport.open()

if cmd == 'createPolicy_IDL':
  if len(args) != 3:
    print 'createPolicy_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.createPolicy_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'deletePolicy_IDL':
  if len(args) != 2:
    print 'deletePolicy_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.deletePolicy_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'deleteAllPolicies_IDL':
  if len(args) != 1:
    print 'deleteAllPolicies_IDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.deleteAllPolicies_IDL(eval(args[0]),))

elif cmd == 'createClass_IDL':
  if len(args) != 2:
    print 'createClass_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.createClass_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'deleteClass_IDL':
  if len(args) != 2:
    print 'deleteClass_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteClass_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'addClassToPolicy_IDL':
  if len(args) != 3:
    print 'addClassToPolicy_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.addClassToPolicy_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'removeClassFromPolicy_IDL':
  if len(args) != 2:
    print 'removeClassFromPolicy_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.removeClassFromPolicy_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'addChildToPolicy_IDL':
  if len(args) != 3:
    print 'addChildToPolicy_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.addChildToPolicy_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'removeChildFromPolicy_IDL':
  if len(args) != 3:
    print 'removeChildFromPolicy_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.removeChildFromPolicy_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'removeFilterFromClass_IDL':
  if len(args) != 2:
    print 'removeFilterFromClass_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.removeFilterFromClass_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'setFilterSense_IDL':
  if len(args) != 3:
    print 'setFilterSense_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.setFilterSense_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'addFilterAclToClass_IDL':
  if len(args) != 3:
    print 'addFilterAclToClass_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.addFilterAclToClass_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'addFilterDscpToClass_IDL':
  if len(args) != 3:
    print 'addFilterDscpToClass_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.addFilterDscpToClass_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'addFilterMplsToClass_IDL':
  if len(args) != 3:
    print 'addFilterMplsToClass_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.addFilterMplsToClass_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'addFilterDlciToClass_IDL':
  if len(args) != 3:
    print 'addFilterDlciToClass_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.addFilterDlciToClass_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'addFilterDeToClass_IDL':
  if len(args) != 2:
    print 'addFilterDeToClass_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.addFilterDeToClass_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'addFilterL2CosToClass_IDL':
  if len(args) != 3:
    print 'addFilterL2CosToClass_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.addFilterL2CosToClass_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'addFilterMacAddressToClass_IDL':
  if len(args) != 3:
    print 'addFilterMacAddressToClass_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.addFilterMacAddressToClass_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'addFilterPktLenToClass_IDL':
  if len(args) != 4:
    print 'addFilterPktLenToClass_IDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.addFilterPktLenToClass_IDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'addFilterProtocolToClass_IDL':
  if len(args) != 5:
    print 'addFilterProtocolToClass_IDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.addFilterProtocolToClass_IDL(eval(args[0]),eval(args[1]),args[2],args[3],args[4],))

elif cmd == 'addFilterQosGroupToClass_IDL':
  if len(args) != 3:
    print 'addFilterQosGroupToClass_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.addFilterQosGroupToClass_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'addFilterRtpPortToClass_IDL':
  if len(args) != 3:
    print 'addFilterRtpPortToClass_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.addFilterRtpPortToClass_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'addFilterVlanToClass_IDL':
  if len(args) != 3:
    print 'addFilterVlanToClass_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.addFilterVlanToClass_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'removeActionFromClass_IDL':
  if len(args) != 3:
    print 'removeActionFromClass_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.removeActionFromClass_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'addActionDropToClass_IDL':
  if len(args) != 5:
    print 'addActionDropToClass_IDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.addActionDropToClass_IDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'addActionIfcToClass_IDL':
  if len(args) != 3:
    print 'addActionIfcToClass_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.addActionIfcToClass_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'addActionNextHopToClass_IDL':
  if len(args) != 4:
    print 'addActionNextHopToClass_IDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.addActionNextHopToClass_IDL(eval(args[0]),eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'addActionMarkToClass_IDL':
  if len(args) != 3:
    print 'addActionMarkToClass_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.addActionMarkToClass_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'addActionPoliceToClass_IDL':
  if len(args) != 3:
    print 'addActionPoliceToClass_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.addActionPoliceToClass_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'addActionShapeToClass_IDL':
  if len(args) != 3:
    print 'addActionShapeToClass_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.addActionShapeToClass_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'addActionPriorityQueueToClass_IDL':
  if len(args) != 3:
    print 'addActionPriorityQueueToClass_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.addActionPriorityQueueToClass_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'addActionClassBasedQueueToClass_IDL':
  if len(args) != 3:
    print 'addActionClassBasedQueueToClass_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.addActionClassBasedQueueToClass_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'addActionFairQueueToClass_IDL':
  if len(args) != 3:
    print 'addActionFairQueueToClass_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.addActionFairQueueToClass_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'addActionQueueLimitToClass_IDL':
  if len(args) != 3:
    print 'addActionQueueLimitToClass_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.addActionQueueLimitToClass_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'addActionWredToClass_IDL':
  if len(args) != 6:
    print 'addActionWredToClass_IDL requires 6 args'
    sys.exit(1)
  pp.pprint(client.addActionWredToClass_IDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),))

elif cmd == 'addWredProfileToClass_IDL':
  if len(args) != 8:
    print 'addWredProfileToClass_IDL requires 8 args'
    sys.exit(1)
  pp.pprint(client.addWredProfileToClass_IDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),eval(args[6]),eval(args[7]),))

elif cmd == 'removeWredProfileFromClass_IDL':
  if len(args) != 8:
    print 'removeWredProfileFromClass_IDL requires 8 args'
    sys.exit(1)
  pp.pprint(client.removeWredProfileFromClass_IDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),eval(args[6]),eval(args[7]),))

elif cmd == 'addActionCopyToClass_IDL':
  if len(args) != 8:
    print 'addActionCopyToClass_IDL requires 8 args'
    sys.exit(1)
  pp.pprint(client.addActionCopyToClass_IDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),eval(args[6]),eval(args[7]),))

elif cmd == 'addActionDivertToClass_IDL':
  if len(args) != 6:
    print 'addActionDivertToClass_IDL requires 6 args'
    sys.exit(1)
  pp.pprint(client.addActionDivertToClass_IDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),))

elif cmd == 'addActionCopyToAce_IDL':
  if len(args) != 8:
    print 'addActionCopyToAce_IDL requires 8 args'
    sys.exit(1)
  pp.pprint(client.addActionCopyToAce_IDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),eval(args[6]),eval(args[7]),))

elif cmd == 'addActionDivertToAce_IDL':
  if len(args) != 5:
    print 'addActionDivertToAce_IDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.addActionDivertToAce_IDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'removeActionFromAce_IDL':
  if len(args) != 3:
    print 'removeActionFromAce_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.removeActionFromAce_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'applyPolicyToTarget_IDL':
  if len(args) != 3:
    print 'applyPolicyToTarget_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.applyPolicyToTarget_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'removePolicyFromTarget_IDL':
  if len(args) != 3:
    print 'removePolicyFromTarget_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.removePolicyFromTarget_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'createAcl_IDL':
  if len(args) != 4:
    print 'createAcl_IDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.createAcl_IDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'deleteAcl_IDL':
  if len(args) != 2:
    print 'deleteAcl_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteAcl_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'getL3AceList_IDL':
  if len(args) != 4:
    print 'getL3AceList_IDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.getL3AceList_IDL(eval(args[0]),eval(args[1]),args[2],eval(args[3]),))

elif cmd == 'getAceList_IDL':
  if len(args) != 1:
    print 'getAceList_IDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAceList_IDL(eval(args[0]),))

elif cmd == 'getL2AceList_IDL':
  if len(args) != 2:
    print 'getL2AceList_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.getL2AceList_IDL(eval(args[0]),args[1],))

elif cmd == 'getAclList_IDL':
  if len(args) != 1:
    print 'getAclList_IDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAclList_IDL(eval(args[0]),))

elif cmd == 'getIfcAclList_IDL':
  if len(args) != 3:
    print 'getIfcAclList_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.getIfcAclList_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'getAclByName_IDL':
  if len(args) != 1:
    print 'getAclByName_IDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAclByName_IDL(args[0],))

elif cmd == 'getAclName_IDL':
  if len(args) != 1:
    print 'getAclName_IDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAclName_IDL(eval(args[0]),))

elif cmd == 'addL3Ace_IDL':
  if len(args) != 2:
    print 'addL3Ace_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.addL3Ace_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'addL2Ace_IDL':
  if len(args) != 2:
    print 'addL2Ace_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.addL2Ace_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'deleteAce_IDL':
  if len(args) != 2:
    print 'deleteAce_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteAce_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'applyAclToInterface_IDL':
  if len(args) != 3:
    print 'applyAclToInterface_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.applyAclToInterface_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'removeAclFromInterface_IDL':
  if len(args) != 3:
    print 'removeAclFromInterface_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.removeAclFromInterface_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'getAceMatch_IDL':
  if len(args) != 2:
    print 'getAceMatch_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.getAceMatch_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'clearAclMatch_IDL':
  if len(args) != 1:
    print 'clearAclMatch_IDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.clearAclMatch_IDL(eval(args[0]),))

elif cmd == 'getPolicyCapability_IDL':
  if len(args) != 1:
    print 'getPolicyCapability_IDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.getPolicyCapability_IDL(eval(args[0]),))

elif cmd == 'getProtocolCapability_IDL':
  if len(args) != 1:
    print 'getProtocolCapability_IDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.getProtocolCapability_IDL(eval(args[0]),))

elif cmd == 'getSubProtocolCapability_IDL':
  if len(args) != 1:
    print 'getSubProtocolCapability_IDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.getSubProtocolCapability_IDL(args[0],))

elif cmd == 'createNamedAcl_IDL':
  if len(args) != 4:
    print 'createNamedAcl_IDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.createNamedAcl_IDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'deleteNamedAcl_IDL':
  if len(args) != 5:
    print 'deleteNamedAcl_IDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.deleteNamedAcl_IDL(eval(args[0]),args[1],eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'addNamedL3Ace_IDL':
  if len(args) != 5:
    print 'addNamedL3Ace_IDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.addNamedL3Ace_IDL(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'deleteNamedAce_IDL':
  if len(args) != 5:
    print 'deleteNamedAce_IDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.deleteNamedAce_IDL(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'applyNamedAclToInterface_IDL':
  if len(args) != 5:
    print 'applyNamedAclToInterface_IDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.applyNamedAclToInterface_IDL(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'removeNamedAclFromInterface_IDL':
  if len(args) != 5:
    print 'removeNamedAclFromInterface_IDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.removeNamedAclFromInterface_IDL(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'getNamedAceMatch_IDL':
  if len(args) != 5:
    print 'getNamedAceMatch_IDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.getNamedAceMatch_IDL(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
