#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import NetworkEventIDL
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void OnepEvent_keepaliveHeartbeatIDL(i32 sessionHandle)'
  print '  void OnepEvent_applEventIDL(i32 sessionHandle, i32 eventHandle, i32 applID, i32 type, string data1, string data2, string data3, string data4)'
  print '  void OnepEvent_appLogLevelChangeIDL(i32 sessionHandle, i32 level, string dummy)'
  print '  void OnepEvent_configNotificationIDL(i32 sessionHandle, string cfg_data_name, string cfg_data_value)'
  print '  void OnepEvent_showDataIDL(i32 sessionHandle, string show_data_name)'
  print '  void OnepEvent_cliEventIDL(i32 sessionHandle, i32 eventHandle, i32 msgCount, i32 tty, i32 errorCode, i32 sync, string message)'
  print '  void OnepEvent_cdpEventIDL(i32 sessionHandle, i32 eventHandle, i64 xosHandle, string name, i32 type, i32 notifyType, string neighborName, i32 holdTime, string mgmtDomain, string platform, string version, string capabilities,  addresses, string neighborIntfName)'
  print '  void OnepEvent_syslogEventIDL(i32 sessionHandle, i32 eventHandle, i32 msgCount, i32 priority, string message)'
  print '  void OnepEvent_oirEventIDL(i32 sessionHandle, i32 eventHandle, i32 slot, i32 oirType)'
  print '  void OnepEvent_InterfaceStateEventIDL(i32 sessionHandle, i32 eventHandle, i64 xosHandle, i32 intfType, i32 stateEventType, i32 intfState, string shortName, i32 link, i32 lineproto)'
  print '  void OnepEvent_InterfaceStatisticsEventIDL(i32 sessionHandle, i32 eventHandle, i64 xosHandle, i32 intfType, i32 parameter, i32 isIncrement, i32 isExitEvent, i32 value, i32 deltaValue, string shortName)'
  print '  void OnepEvent_InterfaceAddrChangeEventIDL(i32 sessionHandle, i32 eventHandle, i64 intfXosHandle, string intfName, i32 intfType, NetworkAddressOutIDL oldAddress, NetworkAddressOutIDL newAddress, NetworkPrefixOutIDL oldPrefix, NetworkPrefixOutIDL newPrefix)'
  print '  void OnepEvent_InterfaceCreateDeleteEventIDL(i32 sessionHandle, i32 eventHandle, i64 intfXosHandle, string intfName, i32 intfType, i32 isCreated, i32 isOir)'
  print '  void OnepEvent_InterfaceCTXEnableDisableEventIDL(i32 sessionHandle, i32 eventHandle, i64 intfXosHandle, string intfName, i32 intfType, i32 oprType)'
  print '  void OnepEvent_InterfaceStatisticsPollEventIDL(i32 sessionHandle, i32 eventHandle, i64 intfXosHandle, string intfName, i32 intfType,  intfstats)'
  print '  void OnepEvent_srvcDiscoveryEventIDL(i32 sessionHandle, i32 eventHandle, i32 discoveryType, i32 ssId, i32 ssState, OnepVersionOutIDL veridl, NetworkAddressOutIDL neAddr)'
  print '  void OnepEvent_vtyEventIDL(i32 sessionHandle, i32 execHandle, i32 state, i32 msgType, string data)'
  print '  void OnepEvent_capIntIDL(i32 sessionHandle, string capabilty_name,  capabilty_value)'
  print '  void OnepEvent_capStrIDL(i32 sessionHandle, string capabilty_name,  capabilty_value)'
  print '  void OnepEvent_ContainerSrvChangeEventIDL(i32 sessionHandle, i32 eventtype, i32 adding, i32 mask, MacAddressOutIDL MacID, NetworkAddressOutIDL Addr)'
  print '  void OnepEvent_ContainerSrvInfoRequestIDL(i32 sessionHandle, i32 eventtype, i32 transactionID, MacAddressOutIDL MacID, i32 extrainfo)'
  print '  void OnepEvent_InterfaceMtuEventIDL(i32 sessionHandle, i32 eventHandle, i64 xosHandle, i32 intfType, string shortName, i32 mtu)'
  print '  void OnepEvent_InterfaceSpeedEventIDL(i32 sessionHandle, i32 eventHandle, i64 xosHandle, i32 intfType, string shortName, i32 speed, i32 configType)'
  print '  void OnepEvent_InterfaceDuplexModeEventIDL(i32 sessionHandle, i32 eventHandle, i64 xosHandle, i32 intfType, string shortName, i32 duplexMode, i32 configType)'
  print '  void OnepEvent_InterfaceAutoNegotiateEventIDL(i32 sessionHandle, i32 eventHandle, i64 xosHandle, i32 intfType, string shortName, i32 autoNeg, i32 configType)'
  print '  void OnepEvent_InterfaceLayer2ModeEventIDL(i32 sessionHandle, i32 eventHandle, i64 xosHandle, i32 intfType, string shortName, i32 laye2Mode)'
  print '  void OnepEvent_InterfaceFlowcontrolEventIDL(i32 sessionHandle, i32 eventHandle, i64 xosHandle, i32 intfType, string shortName, i32 inFlow, i32 outFlow, i32 configType)'
  print '  void OnepEvent_InterfaceForwardClassIDEventIDL(i32 sessionHandle, i32 eventHandle, i64 xosHandle, i32 intfType, string shortName, i32 fwdClassID)'
  print '  void OnepEvent_InterfaceBandwidthEventIDL(i32 sessionHandle, i32 eventHandle, i64 xosHandle, i32 intfType, string shortName, i32 bandwidth, i32 is_tx)'
  print '  void OnepEvent_InterfaceVlanEventIDL(i32 sessionHandle, i32 eventHandle, i64 xosHandle, i32 intfType, string shortName, InterfaceVlanOutIDL vlan, i32 vlanEventType)'
  print '  void OnepEvent_InterfaceVrfEventIDL(i32 sessionHandle, i32 eventHandle, i64 xosHandle, i32 intfType, string shortName, string vrf, i32 vrfEventType)'
  print '  void OnepEvent_HsrpStateEventIDL(i32 sessionHandle, i32 eventHandle, i64 xosHandle, i32 intfType, string shortName, i32 groupid, i32 family, i32 state)'
  print '  void OnepEvent_BDEventIDL(i32 sessionHandle, i32 eventHandle, i32 type, i32 id, string name, i64 xosHandle, i32 intfType, string shortName)'
  print '  void OnepEvent_BDServiceStatusEventIDL(i32 sessionHandle, i32 eventHandle, i32 status, i32 resync)'
  print '  void OnepEvent_PortChannelEventIDL(i32 sessionHandle, i32 eventHandle, i64 pcHandle, string pcName, i64 ifHandle, string ifName, i32 intfType, i32 add)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = NetworkEventIDL.Client(protocol)
transport.open()

if cmd == 'OnepEvent_keepaliveHeartbeatIDL':
  if len(args) != 1:
    print 'OnepEvent_keepaliveHeartbeatIDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_keepaliveHeartbeatIDL(eval(args[0]),))

elif cmd == 'OnepEvent_applEventIDL':
  if len(args) != 8:
    print 'OnepEvent_applEventIDL requires 8 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_applEventIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],args[5],args[6],args[7],))

elif cmd == 'OnepEvent_appLogLevelChangeIDL':
  if len(args) != 3:
    print 'OnepEvent_appLogLevelChangeIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_appLogLevelChangeIDL(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'OnepEvent_configNotificationIDL':
  if len(args) != 3:
    print 'OnepEvent_configNotificationIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_configNotificationIDL(eval(args[0]),args[1],args[2],))

elif cmd == 'OnepEvent_showDataIDL':
  if len(args) != 2:
    print 'OnepEvent_showDataIDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_showDataIDL(eval(args[0]),args[1],))

elif cmd == 'OnepEvent_cliEventIDL':
  if len(args) != 7:
    print 'OnepEvent_cliEventIDL requires 7 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_cliEventIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),args[6],))

elif cmd == 'OnepEvent_cdpEventIDL':
  if len(args) != 14:
    print 'OnepEvent_cdpEventIDL requires 14 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_cdpEventIDL(eval(args[0]),eval(args[1]),eval(args[2]),args[3],eval(args[4]),eval(args[5]),args[6],eval(args[7]),args[8],args[9],args[10],args[11],eval(args[12]),args[13],))

elif cmd == 'OnepEvent_syslogEventIDL':
  if len(args) != 5:
    print 'OnepEvent_syslogEventIDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_syslogEventIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'OnepEvent_oirEventIDL':
  if len(args) != 4:
    print 'OnepEvent_oirEventIDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_oirEventIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'OnepEvent_InterfaceStateEventIDL':
  if len(args) != 9:
    print 'OnepEvent_InterfaceStateEventIDL requires 9 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_InterfaceStateEventIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),args[6],eval(args[7]),eval(args[8]),))

elif cmd == 'OnepEvent_InterfaceStatisticsEventIDL':
  if len(args) != 10:
    print 'OnepEvent_InterfaceStatisticsEventIDL requires 10 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_InterfaceStatisticsEventIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),eval(args[6]),eval(args[7]),eval(args[8]),args[9],))

elif cmd == 'OnepEvent_InterfaceAddrChangeEventIDL':
  if len(args) != 9:
    print 'OnepEvent_InterfaceAddrChangeEventIDL requires 9 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_InterfaceAddrChangeEventIDL(eval(args[0]),eval(args[1]),eval(args[2]),args[3],eval(args[4]),eval(args[5]),eval(args[6]),eval(args[7]),eval(args[8]),))

elif cmd == 'OnepEvent_InterfaceCreateDeleteEventIDL':
  if len(args) != 7:
    print 'OnepEvent_InterfaceCreateDeleteEventIDL requires 7 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_InterfaceCreateDeleteEventIDL(eval(args[0]),eval(args[1]),eval(args[2]),args[3],eval(args[4]),eval(args[5]),eval(args[6]),))

elif cmd == 'OnepEvent_InterfaceCTXEnableDisableEventIDL':
  if len(args) != 6:
    print 'OnepEvent_InterfaceCTXEnableDisableEventIDL requires 6 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_InterfaceCTXEnableDisableEventIDL(eval(args[0]),eval(args[1]),eval(args[2]),args[3],eval(args[4]),eval(args[5]),))

elif cmd == 'OnepEvent_InterfaceStatisticsPollEventIDL':
  if len(args) != 6:
    print 'OnepEvent_InterfaceStatisticsPollEventIDL requires 6 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_InterfaceStatisticsPollEventIDL(eval(args[0]),eval(args[1]),eval(args[2]),args[3],eval(args[4]),eval(args[5]),))

elif cmd == 'OnepEvent_srvcDiscoveryEventIDL':
  if len(args) != 7:
    print 'OnepEvent_srvcDiscoveryEventIDL requires 7 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_srvcDiscoveryEventIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),eval(args[6]),))

elif cmd == 'OnepEvent_vtyEventIDL':
  if len(args) != 5:
    print 'OnepEvent_vtyEventIDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_vtyEventIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'OnepEvent_capIntIDL':
  if len(args) != 3:
    print 'OnepEvent_capIntIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_capIntIDL(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'OnepEvent_capStrIDL':
  if len(args) != 3:
    print 'OnepEvent_capStrIDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_capStrIDL(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'OnepEvent_ContainerSrvChangeEventIDL':
  if len(args) != 6:
    print 'OnepEvent_ContainerSrvChangeEventIDL requires 6 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_ContainerSrvChangeEventIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),))

elif cmd == 'OnepEvent_ContainerSrvInfoRequestIDL':
  if len(args) != 5:
    print 'OnepEvent_ContainerSrvInfoRequestIDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_ContainerSrvInfoRequestIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'OnepEvent_InterfaceMtuEventIDL':
  if len(args) != 6:
    print 'OnepEvent_InterfaceMtuEventIDL requires 6 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_InterfaceMtuEventIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],eval(args[5]),))

elif cmd == 'OnepEvent_InterfaceSpeedEventIDL':
  if len(args) != 7:
    print 'OnepEvent_InterfaceSpeedEventIDL requires 7 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_InterfaceSpeedEventIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],eval(args[5]),eval(args[6]),))

elif cmd == 'OnepEvent_InterfaceDuplexModeEventIDL':
  if len(args) != 7:
    print 'OnepEvent_InterfaceDuplexModeEventIDL requires 7 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_InterfaceDuplexModeEventIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],eval(args[5]),eval(args[6]),))

elif cmd == 'OnepEvent_InterfaceAutoNegotiateEventIDL':
  if len(args) != 7:
    print 'OnepEvent_InterfaceAutoNegotiateEventIDL requires 7 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_InterfaceAutoNegotiateEventIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],eval(args[5]),eval(args[6]),))

elif cmd == 'OnepEvent_InterfaceLayer2ModeEventIDL':
  if len(args) != 6:
    print 'OnepEvent_InterfaceLayer2ModeEventIDL requires 6 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_InterfaceLayer2ModeEventIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],eval(args[5]),))

elif cmd == 'OnepEvent_InterfaceFlowcontrolEventIDL':
  if len(args) != 8:
    print 'OnepEvent_InterfaceFlowcontrolEventIDL requires 8 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_InterfaceFlowcontrolEventIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],eval(args[5]),eval(args[6]),eval(args[7]),))

elif cmd == 'OnepEvent_InterfaceForwardClassIDEventIDL':
  if len(args) != 6:
    print 'OnepEvent_InterfaceForwardClassIDEventIDL requires 6 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_InterfaceForwardClassIDEventIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],eval(args[5]),))

elif cmd == 'OnepEvent_InterfaceBandwidthEventIDL':
  if len(args) != 7:
    print 'OnepEvent_InterfaceBandwidthEventIDL requires 7 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_InterfaceBandwidthEventIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],eval(args[5]),eval(args[6]),))

elif cmd == 'OnepEvent_InterfaceVlanEventIDL':
  if len(args) != 7:
    print 'OnepEvent_InterfaceVlanEventIDL requires 7 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_InterfaceVlanEventIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],eval(args[5]),eval(args[6]),))

elif cmd == 'OnepEvent_InterfaceVrfEventIDL':
  if len(args) != 7:
    print 'OnepEvent_InterfaceVrfEventIDL requires 7 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_InterfaceVrfEventIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],args[5],eval(args[6]),))

elif cmd == 'OnepEvent_HsrpStateEventIDL':
  if len(args) != 8:
    print 'OnepEvent_HsrpStateEventIDL requires 8 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_HsrpStateEventIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],eval(args[5]),eval(args[6]),eval(args[7]),))

elif cmd == 'OnepEvent_BDEventIDL':
  if len(args) != 8:
    print 'OnepEvent_BDEventIDL requires 8 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_BDEventIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],eval(args[5]),eval(args[6]),args[7],))

elif cmd == 'OnepEvent_BDServiceStatusEventIDL':
  if len(args) != 4:
    print 'OnepEvent_BDServiceStatusEventIDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_BDServiceStatusEventIDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'OnepEvent_PortChannelEventIDL':
  if len(args) != 8:
    print 'OnepEvent_PortChannelEventIDL requires 8 args'
    sys.exit(1)
  pp.pprint(client.OnepEvent_PortChannelEventIDL(eval(args[0]),eval(args[1]),eval(args[2]),args[3],eval(args[4]),args[5],eval(args[6]),eval(args[7]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
