#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import LispIDL
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  i32 createLisp_IDL(i32 lispHandle, i32 vrf)'
  print '  i32 deleteLisp_IDL(i32 lispHandle)'
  print '  i32 enableMapServer_IDL(i32 lispHandle, i32 addrFamily)'
  print '  i32 disableMapServer_IDL(i32 lispHandle, i32 addrFamily)'
  print '  i32 createSite_IDL(i32 lispHandle, i32 siteHandle)'
  print '  i32 deleteSite_IDL(i32 lispHandle, i32 siteHandle)'
  print '  i32 enableMapResolver_IDL(i32 lispHandle, i32 addrFamily)'
  print '  i32 disableMapResolver_IDL(i32 lispHandle, i32 addrFamily)'
  print '  i32 createEidTable_IDL(i32 lispHandle, i32 eidInstanceId, i32 vrf)'
  print '  i32 deleteEidTable_IDL(i32 lispHandle, i32 eidInstanceId)'
  print '  i32 enableXtr_IDL(i32 lispHandle, i32 eidInstanceId, i32 type, i32 addrFamily)'
  print '  i32 disableXtr_IDL(i32 lispHandle, i32 eidInstanceId, i32 type, i32 addrFamily)'
  print '  i32 enablePitr_IDL(i32 lispHandle, i32 eidInstanceId, i32 addrFamily,  address)'
  print '  i32 addItrMapResolver_IDL(i32 lispHandle, i32 eidInstanceId, i32 eidAF, i32 addressAF, string address)'
  print '  i32 removeItrMapResolver_IDL(i32 lispHandle, i32 eidInstanceId, i32 eidAF, i32 addressAF, string address)'
  print '  i32 addEtrMapServer_IDL(i32 lispHandle, i32 eidInstanceId, i32 eidAF, i32 addressAF, string address, string key)'
  print '  i32 removeEtrMapServer_IDL(i32 lispHandle, i32 eidInstanceId, i32 eidAF, i32 addressAF, string address)'
  print '  i32 addLocalPrefix_IDL(i32 lispHandle, i32 eidInstanceId, i32 prefixAF, string prefix, i16 prefixLen)'
  print '  i32 removeLocalPrefix_IDL(i32 lispHandle, i32 eidInstanceId, i32 prefixAF, string prefix, i16 prefixLen)'
  print '  i32 addLocalPrefixRlocMap_IDL(i32 lispHandle, i32 eidInstanceId, i32 prefixAF, string prefix, i16 prefixLen,  localRlocs)'
  print '  i32 removeLocalPrefixRlocMap_IDL(i32 lispHandle, i32 eidInstanceId, i32 prefixAF, string prefix, i16 prefixLen, i32 rlocAF, string rloc)'
  print '  i32 addLocalPrefixIfcMap_IDL(i32 lispHandle, i32 eidInstanceId, i32 prefixAF, string prefix, i16 prefixLen, i64 ifHandle, i32 addrFamily, byte priority, byte weight)'
  print '  i32 removeLocalPrefixIfcMap_IDL(i32 lispHandle, i32 eidInstanceId, i32 prefixAF, string prefix, i16 prefixLen, i64 ifHandle, i32 addrFamily)'
  print '  i32 addRemotePrefix_IDL(i32 lispHandle, i32 eidInstanceId, i32 prefixAF, string prefix, i16 prefixLen)'
  print '  i32 removeRemotePrefix_IDL(i32 lispHandle, i32 eidInstanceId, i32 prefixAF, string prefix, i16 prefixLen)'
  print '  i32 addMapServerAddressToEtr_IDL(i32 lispHandle, i32 eidInstanceId, i32 addrFamily, string addr, string key)'
  print '  i32 addRemotePrefixRlocMap_IDL(i32 lispHandle, i32 eidInstanceId, i32 prefixAF, string prefix, i16 prefixLen, i32 state,  remoteRlocs)'
  print '  i32 removeRemotePrefixRlocMap_IDL(i32 lispHandle, i32 eidInstanceId, i32 prefixAF, string prefix, i16 prefixLen, i32 rlocAF, string rloc)'
  print '  i32 addPrefixToSite_IDL(i32 lispHandle, i32 siteHandle, i32 eidInstanceId, i32 prefixAF, string prefix, i16 prefixLen)'
  print '  i32 removePrefixFromSite_IDL(i32 lispHandle, i32 siteHandle, i32 eidInstanceId, i32 prefixAF, string prefix, i16 prefixLen)'
  print '  i32 setMapServerKey_IDL(i32 lispHandle, i32 siteHandle, string key)'
  print '  i32 clearMapServerReg_IDL(i32 lispHandle, i32 siteHandle, i32 eidInstanceId, i32 prefixAF, string prefix, i16 prefixLen)'
  print '  i32 clearMapCacheEntry_IDL(i32 lispHandle, i32 eidInstanceId, i32 prefixAF, string prefix, i16 prefixLen)'
  print '  RemoteEidPrefixIDL findMapCacheEntry_IDL(i32 lispHandle, i32 eidInstanceId, i32 prefixAF, string prefix, i16 prefixLen)'
  print '  RemoteEidPrefixIDL findMapCacheLongestMatchEntry_IDL(i32 lispHandle, i32 eidInstanceId, i32 addrAF, string addr)'
  print '  i32 signalMapCache_IDL(i32 lispHandle, i32 eidInstanceId, i32 addrAF, string addr)'
  print '  i32 enableProbe_IDL(i32 lispHandle, i32 eidInstanceId)'
  print '  i32 disableProbe_IDL(i32 lispHandle, i32 eidInstanceId)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = LispIDL.Client(protocol)
transport.open()

if cmd == 'createLisp_IDL':
  if len(args) != 2:
    print 'createLisp_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.createLisp_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'deleteLisp_IDL':
  if len(args) != 1:
    print 'deleteLisp_IDL requires 1 args'
    sys.exit(1)
  pp.pprint(client.deleteLisp_IDL(eval(args[0]),))

elif cmd == 'enableMapServer_IDL':
  if len(args) != 2:
    print 'enableMapServer_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.enableMapServer_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'disableMapServer_IDL':
  if len(args) != 2:
    print 'disableMapServer_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.disableMapServer_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'createSite_IDL':
  if len(args) != 2:
    print 'createSite_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.createSite_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'deleteSite_IDL':
  if len(args) != 2:
    print 'deleteSite_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteSite_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'enableMapResolver_IDL':
  if len(args) != 2:
    print 'enableMapResolver_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.enableMapResolver_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'disableMapResolver_IDL':
  if len(args) != 2:
    print 'disableMapResolver_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.disableMapResolver_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'createEidTable_IDL':
  if len(args) != 3:
    print 'createEidTable_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.createEidTable_IDL(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'deleteEidTable_IDL':
  if len(args) != 2:
    print 'deleteEidTable_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteEidTable_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'enableXtr_IDL':
  if len(args) != 4:
    print 'enableXtr_IDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.enableXtr_IDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'disableXtr_IDL':
  if len(args) != 4:
    print 'disableXtr_IDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.disableXtr_IDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'enablePitr_IDL':
  if len(args) != 4:
    print 'enablePitr_IDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.enablePitr_IDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'addItrMapResolver_IDL':
  if len(args) != 5:
    print 'addItrMapResolver_IDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.addItrMapResolver_IDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'removeItrMapResolver_IDL':
  if len(args) != 5:
    print 'removeItrMapResolver_IDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.removeItrMapResolver_IDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'addEtrMapServer_IDL':
  if len(args) != 6:
    print 'addEtrMapServer_IDL requires 6 args'
    sys.exit(1)
  pp.pprint(client.addEtrMapServer_IDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],args[5],))

elif cmd == 'removeEtrMapServer_IDL':
  if len(args) != 5:
    print 'removeEtrMapServer_IDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.removeEtrMapServer_IDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'addLocalPrefix_IDL':
  if len(args) != 5:
    print 'addLocalPrefix_IDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.addLocalPrefix_IDL(eval(args[0]),eval(args[1]),eval(args[2]),args[3],eval(args[4]),))

elif cmd == 'removeLocalPrefix_IDL':
  if len(args) != 5:
    print 'removeLocalPrefix_IDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.removeLocalPrefix_IDL(eval(args[0]),eval(args[1]),eval(args[2]),args[3],eval(args[4]),))

elif cmd == 'addLocalPrefixRlocMap_IDL':
  if len(args) != 6:
    print 'addLocalPrefixRlocMap_IDL requires 6 args'
    sys.exit(1)
  pp.pprint(client.addLocalPrefixRlocMap_IDL(eval(args[0]),eval(args[1]),eval(args[2]),args[3],eval(args[4]),eval(args[5]),))

elif cmd == 'removeLocalPrefixRlocMap_IDL':
  if len(args) != 7:
    print 'removeLocalPrefixRlocMap_IDL requires 7 args'
    sys.exit(1)
  pp.pprint(client.removeLocalPrefixRlocMap_IDL(eval(args[0]),eval(args[1]),eval(args[2]),args[3],eval(args[4]),eval(args[5]),args[6],))

elif cmd == 'addLocalPrefixIfcMap_IDL':
  if len(args) != 9:
    print 'addLocalPrefixIfcMap_IDL requires 9 args'
    sys.exit(1)
  pp.pprint(client.addLocalPrefixIfcMap_IDL(eval(args[0]),eval(args[1]),eval(args[2]),args[3],eval(args[4]),eval(args[5]),eval(args[6]),eval(args[7]),eval(args[8]),))

elif cmd == 'removeLocalPrefixIfcMap_IDL':
  if len(args) != 7:
    print 'removeLocalPrefixIfcMap_IDL requires 7 args'
    sys.exit(1)
  pp.pprint(client.removeLocalPrefixIfcMap_IDL(eval(args[0]),eval(args[1]),eval(args[2]),args[3],eval(args[4]),eval(args[5]),eval(args[6]),))

elif cmd == 'addRemotePrefix_IDL':
  if len(args) != 5:
    print 'addRemotePrefix_IDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.addRemotePrefix_IDL(eval(args[0]),eval(args[1]),eval(args[2]),args[3],eval(args[4]),))

elif cmd == 'removeRemotePrefix_IDL':
  if len(args) != 5:
    print 'removeRemotePrefix_IDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.removeRemotePrefix_IDL(eval(args[0]),eval(args[1]),eval(args[2]),args[3],eval(args[4]),))

elif cmd == 'addMapServerAddressToEtr_IDL':
  if len(args) != 5:
    print 'addMapServerAddressToEtr_IDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.addMapServerAddressToEtr_IDL(eval(args[0]),eval(args[1]),eval(args[2]),args[3],args[4],))

elif cmd == 'addRemotePrefixRlocMap_IDL':
  if len(args) != 7:
    print 'addRemotePrefixRlocMap_IDL requires 7 args'
    sys.exit(1)
  pp.pprint(client.addRemotePrefixRlocMap_IDL(eval(args[0]),eval(args[1]),eval(args[2]),args[3],eval(args[4]),eval(args[5]),eval(args[6]),))

elif cmd == 'removeRemotePrefixRlocMap_IDL':
  if len(args) != 7:
    print 'removeRemotePrefixRlocMap_IDL requires 7 args'
    sys.exit(1)
  pp.pprint(client.removeRemotePrefixRlocMap_IDL(eval(args[0]),eval(args[1]),eval(args[2]),args[3],eval(args[4]),eval(args[5]),args[6],))

elif cmd == 'addPrefixToSite_IDL':
  if len(args) != 6:
    print 'addPrefixToSite_IDL requires 6 args'
    sys.exit(1)
  pp.pprint(client.addPrefixToSite_IDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],eval(args[5]),))

elif cmd == 'removePrefixFromSite_IDL':
  if len(args) != 6:
    print 'removePrefixFromSite_IDL requires 6 args'
    sys.exit(1)
  pp.pprint(client.removePrefixFromSite_IDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],eval(args[5]),))

elif cmd == 'setMapServerKey_IDL':
  if len(args) != 3:
    print 'setMapServerKey_IDL requires 3 args'
    sys.exit(1)
  pp.pprint(client.setMapServerKey_IDL(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'clearMapServerReg_IDL':
  if len(args) != 6:
    print 'clearMapServerReg_IDL requires 6 args'
    sys.exit(1)
  pp.pprint(client.clearMapServerReg_IDL(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],eval(args[5]),))

elif cmd == 'clearMapCacheEntry_IDL':
  if len(args) != 5:
    print 'clearMapCacheEntry_IDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.clearMapCacheEntry_IDL(eval(args[0]),eval(args[1]),eval(args[2]),args[3],eval(args[4]),))

elif cmd == 'findMapCacheEntry_IDL':
  if len(args) != 5:
    print 'findMapCacheEntry_IDL requires 5 args'
    sys.exit(1)
  pp.pprint(client.findMapCacheEntry_IDL(eval(args[0]),eval(args[1]),eval(args[2]),args[3],eval(args[4]),))

elif cmd == 'findMapCacheLongestMatchEntry_IDL':
  if len(args) != 4:
    print 'findMapCacheLongestMatchEntry_IDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.findMapCacheLongestMatchEntry_IDL(eval(args[0]),eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'signalMapCache_IDL':
  if len(args) != 4:
    print 'signalMapCache_IDL requires 4 args'
    sys.exit(1)
  pp.pprint(client.signalMapCache_IDL(eval(args[0]),eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'enableProbe_IDL':
  if len(args) != 2:
    print 'enableProbe_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.enableProbe_IDL(eval(args[0]),eval(args[1]),))

elif cmd == 'disableProbe_IDL':
  if len(args) != 2:
    print 'disableProbe_IDL requires 2 args'
    sys.exit(1)
  pp.pprint(client.disableProbe_IDL(eval(args[0]),eval(args[1]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
