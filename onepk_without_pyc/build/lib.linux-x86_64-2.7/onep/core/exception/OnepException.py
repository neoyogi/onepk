# 2015.02.05 17:18:07 IST
from Shared.ttypes import ExceptionIDL
try:
    from onep.core.util.OnepStatus import OnepStatus
except ImportError:
    pass

class OnepException(Exception):
    """OnepException represents a general exception to be thrown by ONE-P API when
         an unrecoverable error is encountered.
        
        This general exception is meant to be used as a fallback when the cause of error 
        cannot be determined. In the situation when the cause is known, the  
        derived exception from this one should be used to provide more specific 
        information. Class for handling exceptions generated by Illegal arguments.
    """

    __defaultMessage = 'Error occurred in the operation. '

    def __init__(self, arg_string = None, arg_cause = None):
        """Constructor of OnepException.
        
        This calls the basic Exception class in pyton.Constructs a new exception with
        default message as its detail message. If additional parameters are passed then
        those parameters will be displayed as part of error message depending on its type
        
        Parameters:
                arg_string: This is the error message.
                arg_cause : This is the class object which has more information
                                        regarding the issue.
        """
        if arg_string and arg_string.__class__ == str:
            if arg_cause and isinstance(arg_cause, ExceptionIDL):
                from onep.core.util.OnepStatus import OnepStatus
                if arg_cause.code == OnepStatus.ONEP_ERR_NOT_SUPPORTED:
                    raise OnepNotSupportedException(arg_string + ' API not supported')
                if arg_cause.code == OnepStatus.ONEP_ERR_SERVICE_DISABLED:
                    raise OnepServiceNotEnabledException(arg_string + ' Service not enabled')
                if arg_cause.code == OnepStatus.ONEP_ERR_NO_DATA:
                    raise OnepNoDataException(arg_string + ' No data available')
                msg = arg_string + ', ' + OnepStatus.enumval(arg_cause.code)
                super(OnepException, self).__init__(msg)
            else:
                message = self.__defaultMessage + ' ' + arg_string
                super(OnepException, self).__init__(message)
        else:
            super(OnepException, self).__init__(self.__defaultMessage)




class OnepCommandException(ValueError):
    pass

class OnepInvalidInput(ValueError):
    pass

class OnepResourceBusyException(IOError):
    pass

class OnepNotSupportedException(IOError):
    pass

class OnepServiceNotEnabledException(IOError):
    pass

class OnepNoDataException(IOError):
    pass

class OnepDataExistsException(IOError):
    pass

class OnepInUseException(IOError):
    pass

class OnepInvalidRangeException(IOError):
    pass

class OnepInvalidAddressException(IOError):
    pass

class OnepInvalidMaskException(IOError):
    pass

class OnepConflictException(IOError):
    pass

class OnepInvalidVrfException(IOError):
    pass

class OnepExceedMaxAllowanceException(IOError):
    pass

# decompiled 1 files: 1 okay, 0 failed, 0 verify failed
# 2015.02.05 17:18:07 IST
