AAA Tutorial
------------

This tutorial demonstrates the onepPK AAA (Authentication, Authorization, and
Accounting) Service Set. The AAA Service Set provides AAA client
functionality to onePK applications.

You will learn how to authenticate a user, how to read the user's
authorization attributes configured on the AAA server, and how to send
accounting requests to the AAA server.

To run this tutorial:

Notes: Make sure that the onep Python module is installed
       Python version supported is 2.7.
              
   Usage:

   AAATutorial.py -a <element hostname or address> \
         [-t <transport_type>] \
	     [-C <client cert file> -K <client private key file> \
	     -R <root certificates file>] \
	     [-P <tls pinning file>]

    -a <element hostname or address> Network element's hostname or IP address.
    -t <transport type> Transport type (tls|tipc).  Default is TLS.
    -C <client cert file> Client certificate file required TLS client
                          authentication.
    -K <client private key file> Client private key file required for TLS
                                 client authentication.
    -R <CA certs file> CA certificates file required for TLS.

    The application will prompt the user to enter username and password that 
    are configured on the network element you are connecting to.

    For more information on how to use TLS connection please refer to the 
     Getting Started Guide.

+-------------------+       +-----------------+       +------------+
|                   |       |                 |       |            |
| onePK Application | <---> | Network Element | <---> | AAA Server |
|                   |       |                 |       |            |
+-------------------+       +-----------------+       +------------+

The AAA server must first be configured with the necessary users and user
authorization profiles for the application. The network element which the
application connect to must also be configured to use the AAA server.

The following example is on IOS and will be using FreeRADIUS as the AAA
server. Your configuration may vary depending on the platform and AAA server
you are using.


Configuring FreeRADIUS

Create a user in the "users" configuration file. This will be the username and
password used to connect to the network element. Here we will use user1/pass1.

user1	Cleartext-Password := "pass1"
	Cisco-AVPair += "priv-lvl=15",

To enable auto-accounting for a user, append the following:

	Cisco-AVPair += "auto-acct=enable",

To authorize a user to use a specific onePK application, add a Cisco-AVPair of
the type "allowed-app=<app-name>". The app-name is the unique name given to a
onePK application. For the AAA Tutorial, append the following to user1's
configuration:

	Cisco-AVPair += "allowed-app=com.cisco.onep.tutorials.aaa.AAATutorial",

In additional to the enumerated AAA attributes, the onePK AAA client recognizes
app-specific attributes "allowed-action=<app-name>:<action>" and
"app-attr=<app-attr-name>:<type>:<app-attr-value>". For the AAA Tutorial,
append the following to user1's configuration:

	Cisco-AVPair += "allowed-action=com.cisco.onep.tutorials.aaa.AAATutorial:walk",
	Cisco-AVPair += "allowed-action=com.cisco.onep.tutorials.aaa.AAATutorial:run",
	Cisco-AVPair += "allowed-action=com.cisco.onep.tutorials.aaa.AAATutorial:custom",
	Cisco-AVPair += "app-attr=aaa-tutorial-custom:string:jump"

The full user configuration for the AAA Tutorial is as follows:

user1	Cleartext-Password := "pass1"
	Cisco-AVPair += "priv-lvl=15",
	Cisco-AVPair += "auto-acct=enable",
	Cisco-AVPair += "allowed-app=com.cisco.onep.tutorials.aaa.AAATutorial",
	Cisco-AVPair += "allowed-action=com.cisco.onep.tutorials.aaa.AAATutorial:walk",
	Cisco-AVPair += "allowed-action=com.cisco.onep.tutorials.aaa.AAATutorial:run",
	Cisco-AVPair += "allowed-action=com.cisco.onep.tutorials.aaa.AAATutorial:custom",
	Cisco-AVPair += "app-attr=aaa-tutorial-custom:string:jump"


Configuring IOS

If you are connecting to a network element that runs IOS, you must configure the
network element to obtain its AAA attributes from the AAA server. The following
steps show how this is done from the IOS command line interface.

IOS>enable
IOS#configure terminal
IOS(config)#aaa new-model
IOS(config)#radius server <alias-of-radius-server>
IOS(config-radius-server)#address <ipv4|ipv6> <address-of-radius-server> [auth-port <port-#>] [acct-port <port-#>]
IOS(config-radius-server)#key <pre-shared-key>
IOS(config-radius-server)#exit
IOS(config)#aaa authentication onep default group radius
IOS(config)#aaa authorization onep default group radius
IOS(config)#aaa accounting onep default <accounting-mode> [group radius]
IOS(config)#end


Configuring NX-OS

If you are connecting to a network element that runs IOS, you must configure the
network element to obtain its AAA attributes from the AAA server. The following
steps show how this is done from the IOS command line interface.

NX-OS#configure terminal
NX-OS(config)#radius distribute
NX-OS(config)#radius-server host <ip-of-radius-server> [key <pre-shared-key>]
NX-OS(config)#radius commit
NX-OS(config)#aaa group server radius <name-the-server-group>
NX-OS(config-radius)#server <ip-of-radius-server>
NX-OS(config-radius)#use-vrf <vrf-to-use>
NX-OS(config-radius)#source-interface <source-interface-to-use>
NX-OS(config-radius)#exit
NX-OS(config)#aaa authentication onep default group <name-of-server-group>
NX-OS(config)#aaa accounting onep default group <name-of-server-group>
NX-OS(config)#end
