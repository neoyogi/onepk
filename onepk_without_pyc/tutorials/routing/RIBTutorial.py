#!/usr/bin/env python

# Copyright (c) 2010-2013 by Cisco syss, Inc.
# 
# THIS SAMPLE CODE IS PROVIDED "AS IS" WITHOUT ANY EXPRESS OR IMPLIED WARRANTY
# BY CISCO SOLELY FOR THE PURPOSE of PROVIDING PROGRAMMING EXAMPLES.
# CISCO SHALL NOT BE HELD LIABLE FOR ANY USE OF THE SAMPLE CODE IN ANY
# APPLICATION.
# 
# Redistribution and use of the sample code, with or without
# modification, are permitted provided that the following conditions
# are met:
# Redistributions of source code must retain the above disclaimer.
# 
# package: tutorials.routing
import logging
from BaseTutorial import BaseTutorial
from onep.core.exception import OnepRemoteProcedureException
from onep.routing import Routing
from onep.routing import L3UnicastRIBFilter
from onep.routing import L3UnicastScope
from onep.routing import L3UnicastRouteRange
from onep.interfaces import NetworkPrefix
from onep.routing import L3UnicastRoute
from onep.routing import L3UnicastRouteOperation
from onep.routing import L3UnicastNextHop
from onep.interfaces import NetworkInterface
from onep.routing import AppRouteTable
from onep.routing import RIBRouteStateListener
from onep.routing import RIBRouteStateEvent
from onep.routing import ARTRouteStateListener
from onep.core.exception import OnepIllegalArgumentException
from onep.core.exception import OnepException
from onep.core.exception import OnepRemoteProcedureException
from onep.routing import RIB
from onep.routing import RouteRange
from onep.routing import UpdateRouteResponseListener
from onep.routing import RoutingServiceStatusListener
from onep.routing import ReplayRouteEventListener

logger = logging.getLogger('onep:RIBTutorial')
logger.setLevel(logging.INFO)
  
class RIBTutorial(BaseTutorial):
    """
    This tutorial shows how to create Routing Service Set object, how to read RIB routes, 
    update application routes, add listeners for route up and down events in the RIB, 
    and add listeners for application routes.

    @author The onePK Team (onepk-feedback@cisco.com)
    """

    #  START SNIPPET: ExampleRIBRouteListener
    class ExampleRIBRouteListener(RIBRouteStateListener):
        """
        RIBRouteStateListener implemented as inner class.
        """
        
        def handleEvent(self, event, clientData):
            
            logger.info("RIBRouteStateEvent received...")
            logger.info("Scope: " + event.scope)
            logger.info("Route: " + event.route)
            
            state = event.state
            logger.info("State : ")
            logger.info(RIB.RouteState.enumval(state))
            
            art_event_route = event.route
            nexthoplist = art_event_route.next_hop_list
            for next_hop in nexthoplist:
                try :
                    ni = next_hop.network_interface          
                    na = next_hop.address
                except OnepRemoteProcedureException, e:
                    print "N/A: " + e 
                except OnepConnectionException, e:
                    print str(e)    
                else:
                    print "NextHop ip address is " + na 
                    if ni is not None:
                        print ni.name

    #  END SNIPPET: ExampleRIBRouteListener

    #  START SNIPPET: ExampleARTRouteListener
    class ExampleARTRouteListener(ARTRouteStateListener):
        """
        ARTRouteStateListener implemented as inner class.
        """

        def handleEvent(self, event, clientData):
            
            logger.info("ARTRouteStateEvent received...")
            logger.info("Scope: " + event.scope)
            logger.info("Route: " + event.route)
            art_event_route = event.route
            nexthoplist = art_event_route.next_hop_list
            for next_hop in nexthoplist:
                try:
                    ni = next_hop.network_interface          
                    na = next_hop.address
                except OnepRemoteProcedureException,e:
                    print "N/A: " + e 
                except OnepConnectionException, e:
                    print str(e)   
                except OnepIllegalArgumentException, e:
                    print e 
                else:
                    print "Next hop ip address is " + na 
                    if ni is not None:
                        print ni.name

    #  END SNIPPET: ExampleARTRouteListener

    def get_app_route_table(self):
        """
        Gets the Application Route Table generated by this application.
        
        @return AppRouteTable for this application
        
        @throws OnepConnectionException 
        """
        
        #  START SNIPPET: getAppRouteTable
        #  Create a Routing object for the network element.
        routing = Routing.getInstance(tutorial.get_network_element())
        
        #  Get the instance of application route table.
        approutetable = routing.get_app_route_table()
        return approutetable
        #  END SNIPPET: getAppRouteTable


    def getRIB(self):
        """
        Gets the RIB table for the connected network element.
        
        @return RIB table for the connected network element.
        
        @throws OnepConnectionException
        """
        
        #  START SNIPPET: getRIB
        #  Create a Routing object for the network element.
        routing = Routing.getInstance(tutorial.get_network_element())
        #  Get the instance of the RIB table.
        rib = routing.getRib()
        return rib
        #  END SNIPPET: getRIB
    
    def get_interface(self):
        pass
        

    # 
    #      * 
    #      * 

    #      
    def addRoutes(self, approutetable):
        """
        Adds custom application routes to the network element.
        
        @param approutetable: application route table to be updated
        
        @throws OnepConnectionException
        @throws OnepIllegalArgumentException
        @throws OnepRemoteProcedureException
        @throws UnknownHostException
        """
            
        #  START SNIPPET: addRoutes
        #  Create a Routing object for the network element.
        routing = Routing.get_instance(tutorial.get_network_element())
        #  Specify scope, filter and range;
        aL3UnicastScope = L3UnicastScope("", 
                                         L3UnicastScope.AFIType.IPV4 , 
                                         L3UnicastScope.SAFIType.UNICAST, 
                                         "")
        networkPrefix = NetworkPrefix("10.0.0.0", 32)
        rib_filter = L3UnicastRIBFilter()
        #  Get the instance of RIB information.
        rib = routing.rib
        range = L3UnicastRouteRange(networkPrefix, 
                                    RouteRange.RangeType.EQUAL_OR_LARGER, 
                                    10)
        
        #  Get all routes from RIB.
        ##TODO: Revisit START
        #routeList = rib.get_route_list(aL3UnicastScope, rib_filter, range)
        
        #  Print the route in the list if it is a layer 3 unicast route.
        #for route in routeList:
        #    if isinstance(route, L3UnicastRoute):
        #        logger.info("Route is :  " + route)
        ##TODO: Revisit END
        
        #  Create a new route and change its administrative distance
        #  to make it more trusted. This operation will have the same effect
        #  as the adding/replacing static route using the following IOS
        #  config command:
        # 
        #  ip route 10.1.1.0 255.255.255.0 10.15.1.7
        # 
        
        destNetwork = NetworkPrefix("10.1.1.0", 24)
        eth_interface = tutorial.get_network_element().get_interface_by_name("Ethernet1/1")
        
        route_scope = L3UnicastScope("", L3UnicastScope.AFIType.IPV4 , L3UnicastScope.SAFIType.UNICAST, "")
        aL3UnicastNextHop = L3UnicastNextHop(eth_interface, 
                                             "10.15.1.7", 
                                             route_scope)
        #aL3UnicastNextHopList = HashSet()
        aL3UnicastNextHopList = list()
        
        aL3UnicastNextHopList.append(aL3UnicastNextHop)
        aRoute = L3UnicastRoute(destNetwork, aL3UnicastNextHopList)
        aRoute.admin_distance = 1
        #  Now update the app route table with this route.
        routeOperation = L3UnicastRouteOperation(RouteOperation.RouteOperationType.REPLACE, aRoute)
        
        routeOperationList = list()
        routeOperationList.append(routeOperation)
        approutetable.update_routes(aL3UnicastScope, routeOperationList)
        #  END SNIPPET: addRoutes

    # 
    #      * Adds an Application Routing Table Route Listener.
    #      * 
    #      * @return Event handler identifier for the listener.
    #      * @param approutetable
    #      *            Application routing table to be added with an listener
    #      * @throws OnepException
    #      *             If there is an error.
    #      
    def add_art_route_listener(self, approutetable):
        
        aL3UnicastScope = L3UnicastScope("", L3UnicastScope.AFIType.IPV4 , 
                                            L3UnicastScope.SAFIType.UNICAST, 
                                            "")
        #  START SNIPPET: addARTRouteListener
        #  Add a listener to receive route state change events.
        #  When events arrive, listener.handleEvent() will be invoked.
        exampleARTRouteListener1 = self.ExampleARTRouteListener()
        logger.info("Adding ART listener...")
        exampleARTRouteListenerEventHandle = approutetable.add_route_state_listener(
                    exampleARTRouteListener1, 
                    aL3UnicastScope, 
                    None)
        logger.info(str(exampleARTRouteListenerEventHandle))
        return exampleARTRouteListenerEventHandle
        #  END SNIPPET: addARTRouteListener

    # 
    #      * Removes the Application Routing Table listener.
    #      * 
    #      * @param approutetable
    #      *            ART associated with the listener.
    #      * @param eventHandler
    #      *            associated with the ART to be removed.
    #      * @throws OnepException
    #      *             If there is an error.
    #      
    def remove_art_route_listener(self, approutetable, eventHandler):
        
        #  START SNIPPET: removeARTRouteListener
        #  Remove Application Route listener.
        approutetable.remove_route_state_listener(eventHandler)
        #  END SNIPPET: removeARTRouteListener

    def add_rib_route_listener(self, rib):
        """
        Adds a RIB Route listener.
        
        @return Event handler identifier for the listener.
        
        @param rib: Routing Information Base to be applied
        
        """
        
        #  START SNIPPET: addRIBRouteListener
        aL3UnicastScope = L3UnicastScope("", L3UnicastScope.AFIType.IPV4 , 
                                            L3UnicastScope.SAFIType.UNICAST, 
                                            "")
        rib_filter = L3UnicastRIBFilter()
        #  Add a listener to receive route state change events.
        #  When events arrive, listener.handleEvent() will be invoked.
        exampleRIBRouteListener = self.ExampleRIBRouteListener()
        logger.info("adding RIB listener...")
#         exampleRIBRouteListenerEventHandle = None
        exampleRIBRouteListenerEventHandle = rib.add_route_state_listener(
                                                exampleRIBRouteListener, 
                                                aL3UnicastScope, 
                                                rib_filter, 
                                                0, 
                                                None);
        logger.info(str(exampleRIBRouteListenerEventHandle))
        return exampleRIBRouteListenerEventHandle
        #  END SNIPPET: addRIBRouteListener

    # 
    #      * Remove the RIB listener.
    #      * 
    #      * @param rib
    #      *            RIB associated with listener to be removed
    #      * @param eventHandler
    #      *            associated with the RIB to be removed
    #      * @throws OnepIllegalArgumentException
    #      * @throws OnepRemoteProcedureException
    #      * @throws OnepConnectionException
    #      
    def remove_rib_route_listener(self, rib, eventHandler):
        
        #  START SNIPPET: removeRIBRouteListener
        #  Remove RIB listener.
        rib.remove_route_state_listener(eventHandler)
        #  END SNIPPET: removeRIBRouteListener


if __name__ == '__main__':
    """
    Invokes the tutorial via the command line. This main method attempts to use arguments from the command line.
    """
    import sys
    tutorial = RIBTutorial(sys.argv)
    logger.info("Reading arguments...")
    if not tutorial.parse_command_line():
        logger.error("Error in parsing arguments")
        sys.exit(1)
    try:
        logger.info("Connecting to Network Element...")
        if not tutorial.connect("RIBTutorial"):
            logger.error("Error in connecting to network element")
            sys.exit(1)
        logger.info("Done")
        
        #  Create a Application Routing Table.
        logger.info("Getting a Routing Instance...")
        routing = Routing.get_instance(tutorial.get_network_element())
        
        #  Grab the Routing Information Base
        logger.info("Getting a RIB...")
        rib = routing.rib
        
        #  Add a RIB listener to listen for changes in the RIB.
        aRIBEventHandler = tutorial.add_rib_route_listener(rib)
#         prefix = None
        prefix = NetworkPrefix("10.0.0.0", 32)
        scope = L3UnicastScope("", L3UnicastScope.AFIType.IPV4, L3UnicastScope.SAFIType.UNICAST, "")
        range = L3UnicastRouteRange(
                      prefix, 
                      RouteRange.RangeType.EQUAL_OR_LARGER,
                      10)
        filter = L3UnicastRIBFilter()
        routeList = rib.get_route_list(scope, filter, range)
        logger.info("Routes are : ")
        for route in routeList:
            if (isinstance (route,L3UnicastRoute)):
                logger.info(("L3UnicastRoute[" + 
                    "address:" + route.prefix.address + 
                    "/" + str(route.prefix.prefix_length) + "," + 
                    "ownerType:" + route.OwnerType.enumval(route.owner_type) + "," + 
                    "ownerTag:" + route.owner_tag + "," + 
                    "adminDistance:" + str(route.admin_distance) + "," + "metric:" + str(route.metric) + "," +
                    "errorCode:" + str(route.error_code) + "]"))
        
        #  Removes the RIB Listener.
        tutorial.remove_rib_route_listener(rib, aRIBEventHandler)
        
    except Exception, e:
        tutorial.disconnect()
        logger.error(str(e))
    tutorial.disconnect()
    sys.exit(0)
